<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1254" onload="init(evt)" viewBox="0 0 1200 1254" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1254" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1237.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1237.00"> </text><svg id="frames" x="10" width="1180" total_samples="251155"><g><title>__gmpn_add_n_x86_64 (82 samples, 0.03%)</title><rect x="0.0068%" y="1157" width="0.0326%" height="15" fill="rgb(227,0,7)" fg:x="17" fg:w="82"/><text x="0.2568%" y="1167.50"></text></g><g><title>__gmpn_addmul_1_zen (74,956 samples, 29.84%)</title><rect x="0.0402%" y="1157" width="29.8445%" height="15" fill="rgb(217,0,24)" fg:x="101" fg:w="74956"/><text x="0.2902%" y="1167.50">__gmpn_addmul_1_zen</text></g><g><title>[unknown] (40 samples, 0.02%)</title><rect x="29.8688%" y="1141" width="0.0159%" height="15" fill="rgb(221,193,54)" fg:x="75017" fg:w="40"/><text x="30.1188%" y="1151.50"></text></g><g><title>[unknown] (35 samples, 0.01%)</title><rect x="29.8708%" y="1125" width="0.0139%" height="15" fill="rgb(248,212,6)" fg:x="75022" fg:w="35"/><text x="30.1208%" y="1135.50"></text></g><g><title>[unknown] (33 samples, 0.01%)</title><rect x="29.8716%" y="1109" width="0.0131%" height="15" fill="rgb(208,68,35)" fg:x="75024" fg:w="33"/><text x="30.1216%" y="1119.50"></text></g><g><title>[unknown] (32 samples, 0.01%)</title><rect x="29.8720%" y="1093" width="0.0127%" height="15" fill="rgb(232,128,0)" fg:x="75025" fg:w="32"/><text x="30.1220%" y="1103.50"></text></g><g><title>[unknown] (30 samples, 0.01%)</title><rect x="29.8728%" y="1077" width="0.0119%" height="15" fill="rgb(207,160,47)" fg:x="75027" fg:w="30"/><text x="30.1228%" y="1087.50"></text></g><g><title>__gmpn_mul_basecase_zen (4,647 samples, 1.85%)</title><rect x="29.8891%" y="1157" width="1.8503%" height="15" fill="rgb(228,23,34)" fg:x="75068" fg:w="4647"/><text x="30.1391%" y="1167.50">_..</text></g><g><title>__gmpn_mul_n (45 samples, 0.02%)</title><rect x="31.7418%" y="1141" width="0.0179%" height="15" fill="rgb(218,30,26)" fg:x="79721" fg:w="45"/><text x="31.9918%" y="1151.50"></text></g><g><title>__gmpn_toom22_mul.localalias (41 samples, 0.02%)</title><rect x="31.7433%" y="1125" width="0.0163%" height="15" fill="rgb(220,122,19)" fg:x="79725" fg:w="41"/><text x="31.9933%" y="1135.50"></text></g><g><title>__gmpn_toom22_mul.localalias (27 samples, 0.01%)</title><rect x="31.7489%" y="1109" width="0.0108%" height="15" fill="rgb(250,228,42)" fg:x="79739" fg:w="27"/><text x="31.9989%" y="1119.50"></text></g><g><title>__gmpn_redc_2_fat (230 samples, 0.09%)</title><rect x="31.7597%" y="1141" width="0.0916%" height="15" fill="rgb(240,193,28)" fg:x="79766" fg:w="230"/><text x="32.0097%" y="1151.50"></text></g><g><title>__gmpn_addmul_2_fat (107 samples, 0.04%)</title><rect x="31.8086%" y="1125" width="0.0426%" height="15" fill="rgb(216,20,37)" fg:x="79889" fg:w="107"/><text x="32.0586%" y="1135.50"></text></g><g><title>__gmpn_powm (327 samples, 0.13%)</title><rect x="31.7394%" y="1157" width="0.1302%" height="15" fill="rgb(206,188,39)" fg:x="79715" fg:w="327"/><text x="31.9894%" y="1167.50"></text></g><g><title>__gmpn_sqr (46 samples, 0.02%)</title><rect x="31.8512%" y="1141" width="0.0183%" height="15" fill="rgb(217,207,13)" fg:x="79996" fg:w="46"/><text x="32.1012%" y="1151.50"></text></g><g><title>__gmpn_toom2_sqr.localalias (37 samples, 0.01%)</title><rect x="31.8548%" y="1125" width="0.0147%" height="15" fill="rgb(231,73,38)" fg:x="80005" fg:w="37"/><text x="32.1048%" y="1135.50"></text></g><g><title>__gmpn_sub_n_x86_64 (147 samples, 0.06%)</title><rect x="31.8696%" y="1157" width="0.0585%" height="15" fill="rgb(225,20,46)" fg:x="80042" fg:w="147"/><text x="32.1196%" y="1167.50"></text></g><g><title>__gmpn_powm (29 samples, 0.01%)</title><rect x="31.9480%" y="581" width="0.0115%" height="15" fill="rgb(210,31,41)" fg:x="80239" fg:w="29"/><text x="32.1980%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (65 samples, 0.03%)</title><rect x="31.9365%" y="789" width="0.0259%" height="15" fill="rgb(221,200,47)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (65 samples, 0.03%)</title><rect x="31.9365%" y="773" width="0.0259%" height="15" fill="rgb(226,26,5)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (65 samples, 0.03%)</title><rect x="31.9365%" y="757" width="0.0259%" height="15" fill="rgb(249,33,26)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="767.50"></text></g><g><title>core::ops::function::FnMut::call_mut (65 samples, 0.03%)</title><rect x="31.9365%" y="741" width="0.0259%" height="15" fill="rgb(235,183,28)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="751.50"></text></g><g><title>sssim::authenticator::rsa::hash_package (65 samples, 0.03%)</title><rect x="31.9365%" y="725" width="0.0259%" height="15" fill="rgb(221,5,38)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="735.50"></text></g><g><title>sssim::hash_to_prime::hash_to_prime (65 samples, 0.03%)</title><rect x="31.9365%" y="709" width="0.0259%" height="15" fill="rgb(247,18,42)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="719.50"></text></g><g><title>&lt;sssim::primitives::prime::Prime as core::convert::TryFrom&lt;rug::integer::big::Integer&gt;&gt;::try_from (65 samples, 0.03%)</title><rect x="31.9365%" y="693" width="0.0259%" height="15" fill="rgb(241,131,45)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="703.50"></text></g><g><title>rug::integer::big::Integer::is_probably_prime (65 samples, 0.03%)</title><rect x="31.9365%" y="677" width="0.0259%" height="15" fill="rgb(249,31,29)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="687.50"></text></g><g><title>rug::ext::xmpz::probab_prime_p (65 samples, 0.03%)</title><rect x="31.9365%" y="661" width="0.0259%" height="15" fill="rgb(225,111,53)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="671.50"></text></g><g><title>__gmpz_probab_prime_p (65 samples, 0.03%)</title><rect x="31.9365%" y="645" width="0.0259%" height="15" fill="rgb(238,160,17)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="655.50"></text></g><g><title>__gmpz_millerrabin (65 samples, 0.03%)</title><rect x="31.9365%" y="629" width="0.0259%" height="15" fill="rgb(214,148,48)" fg:x="80210" fg:w="65"/><text x="32.1865%" y="639.50"></text></g><g><title>millerrabin (61 samples, 0.02%)</title><rect x="31.9380%" y="613" width="0.0243%" height="15" fill="rgb(232,36,49)" fg:x="80214" fg:w="61"/><text x="32.1880%" y="623.50"></text></g><g><title>__gmpz_powm (61 samples, 0.02%)</title><rect x="31.9380%" y="597" width="0.0243%" height="15" fill="rgb(209,103,24)" fg:x="80214" fg:w="61"/><text x="32.1880%" y="607.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch (106 samples, 0.04%)</title><rect x="31.9365%" y="805" width="0.0422%" height="15" fill="rgb(229,88,8)" fg:x="80210" fg:w="106"/><text x="32.1865%" y="815.50"></text></g><g><title>sssim::primitives::skip_list::SkipList&lt;C&gt;::add (41 samples, 0.02%)</title><rect x="31.9623%" y="789" width="0.0163%" height="15" fill="rgb(213,181,19)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="799.50"></text></g><g><title>&lt;sssim::accumulator::rsa::HistoryEntry&lt;G&gt; as sssim::primitives::skip_list::Collector&gt;::to_proof (41 samples, 0.02%)</title><rect x="31.9623%" y="773" width="0.0163%" height="15" fill="rgb(254,191,54)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="783.50"></text></g><g><title>sssim::poke::ZKUniverse&lt;G&gt;::prove (41 samples, 0.02%)</title><rect x="31.9623%" y="757" width="0.0163%" height="15" fill="rgb(241,83,37)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="767.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (41 samples, 0.02%)</title><rect x="31.9623%" y="741" width="0.0163%" height="15" fill="rgb(233,36,39)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="751.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (41 samples, 0.02%)</title><rect x="31.9623%" y="725" width="0.0163%" height="15" fill="rgb(226,3,54)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="735.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (41 samples, 0.02%)</title><rect x="31.9623%" y="709" width="0.0163%" height="15" fill="rgb(245,192,40)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="719.50"></text></g><g><title>__gmpz_powm (41 samples, 0.02%)</title><rect x="31.9623%" y="693" width="0.0163%" height="15" fill="rgb(238,167,29)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="703.50"></text></g><g><title>__gmpn_powm (41 samples, 0.02%)</title><rect x="31.9623%" y="677" width="0.0163%" height="15" fill="rgb(232,182,51)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="687.50"></text></g><g><title>__gmpn_redc_2_fat (41 samples, 0.02%)</title><rect x="31.9623%" y="661" width="0.0163%" height="15" fill="rgb(231,60,39)" fg:x="80275" fg:w="41"/><text x="32.2123%" y="671.50"></text></g><g><title>__libc_start_call_main (119 samples, 0.05%)</title><rect x="31.9357%" y="1157" width="0.0474%" height="15" fill="rgb(208,69,12)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1167.50"></text></g><g><title>main (119 samples, 0.05%)</title><rect x="31.9357%" y="1141" width="0.0474%" height="15" fill="rgb(235,93,37)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1151.50"></text></g><g><title>std::rt::lang_start_internal (119 samples, 0.05%)</title><rect x="31.9357%" y="1125" width="0.0474%" height="15" fill="rgb(213,116,39)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1135.50"></text></g><g><title>std::panic::catch_unwind (119 samples, 0.05%)</title><rect x="31.9357%" y="1109" width="0.0474%" height="15" fill="rgb(222,207,29)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1119.50"></text></g><g><title>std::panicking::try (119 samples, 0.05%)</title><rect x="31.9357%" y="1093" width="0.0474%" height="15" fill="rgb(206,96,30)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1103.50"></text></g><g><title>std::panicking::try::do_call (119 samples, 0.05%)</title><rect x="31.9357%" y="1077" width="0.0474%" height="15" fill="rgb(218,138,4)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1087.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (119 samples, 0.05%)</title><rect x="31.9357%" y="1061" width="0.0474%" height="15" fill="rgb(250,191,14)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (119 samples, 0.05%)</title><rect x="31.9357%" y="1045" width="0.0474%" height="15" fill="rgb(239,60,40)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1055.50"></text></g><g><title>std::panicking::try (119 samples, 0.05%)</title><rect x="31.9357%" y="1029" width="0.0474%" height="15" fill="rgb(206,27,48)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (119 samples, 0.05%)</title><rect x="31.9357%" y="1013" width="0.0474%" height="15" fill="rgb(225,35,8)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1023.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (119 samples, 0.05%)</title><rect x="31.9357%" y="997" width="0.0474%" height="15" fill="rgb(250,213,24)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="1007.50"></text></g><g><title>std::rt::lang_start::{{closure}} (119 samples, 0.05%)</title><rect x="31.9357%" y="981" width="0.0474%" height="15" fill="rgb(247,123,22)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (119 samples, 0.05%)</title><rect x="31.9357%" y="965" width="0.0474%" height="15" fill="rgb(231,138,38)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (119 samples, 0.05%)</title><rect x="31.9357%" y="949" width="0.0474%" height="15" fill="rgb(231,145,46)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="959.50"></text></g><g><title>sssim::main (119 samples, 0.05%)</title><rect x="31.9357%" y="933" width="0.0474%" height="15" fill="rgb(251,118,11)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="943.50"></text></g><g><title>sssim::run_batch (119 samples, 0.05%)</title><rect x="31.9357%" y="917" width="0.0474%" height="15" fill="rgb(217,147,25)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="927.50"></text></g><g><title>time::duration::Duration::time_fn (119 samples, 0.05%)</title><rect x="31.9357%" y="901" width="0.0474%" height="15" fill="rgb(247,81,37)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="911.50"></text></g><g><title>sssim::run_batch::{{closure}} (119 samples, 0.05%)</title><rect x="31.9357%" y="885" width="0.0474%" height="15" fill="rgb(209,12,38)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="895.50"></text></g><g><title>sssim::batch_update_trials (119 samples, 0.05%)</title><rect x="31.9357%" y="869" width="0.0474%" height="15" fill="rgb(227,1,9)" fg:x="80208" fg:w="119"/><text x="32.1857%" y="879.50"></text></g><g><title>time::duration::Duration::time_fn (117 samples, 0.05%)</title><rect x="31.9365%" y="853" width="0.0466%" height="15" fill="rgb(248,47,43)" fg:x="80210" fg:w="117"/><text x="32.1865%" y="863.50"></text></g><g><title>sssim::batch_update_trials::{{closure}} (117 samples, 0.05%)</title><rect x="31.9365%" y="837" width="0.0466%" height="15" fill="rgb(221,10,30)" fg:x="80210" fg:w="117"/><text x="32.1865%" y="847.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (117 samples, 0.05%)</title><rect x="31.9365%" y="821" width="0.0466%" height="15" fill="rgb(210,229,1)" fg:x="80210" fg:w="117"/><text x="32.1865%" y="831.50"></text></g><g><title>main (26 samples, 0.01%)</title><rect x="31.9870%" y="1157" width="0.0104%" height="15" fill="rgb(222,148,37)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1167.50"></text></g><g><title>std::rt::lang_start_internal (26 samples, 0.01%)</title><rect x="31.9870%" y="1141" width="0.0104%" height="15" fill="rgb(234,67,33)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1151.50"></text></g><g><title>std::panic::catch_unwind (26 samples, 0.01%)</title><rect x="31.9870%" y="1125" width="0.0104%" height="15" fill="rgb(247,98,35)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1135.50"></text></g><g><title>std::panicking::try (26 samples, 0.01%)</title><rect x="31.9870%" y="1109" width="0.0104%" height="15" fill="rgb(247,138,52)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1119.50"></text></g><g><title>std::panicking::try::do_call (26 samples, 0.01%)</title><rect x="31.9870%" y="1093" width="0.0104%" height="15" fill="rgb(213,79,30)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1103.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (26 samples, 0.01%)</title><rect x="31.9870%" y="1077" width="0.0104%" height="15" fill="rgb(246,177,23)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (26 samples, 0.01%)</title><rect x="31.9870%" y="1061" width="0.0104%" height="15" fill="rgb(230,62,27)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1071.50"></text></g><g><title>std::panicking::try (26 samples, 0.01%)</title><rect x="31.9870%" y="1045" width="0.0104%" height="15" fill="rgb(216,154,8)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (26 samples, 0.01%)</title><rect x="31.9870%" y="1029" width="0.0104%" height="15" fill="rgb(244,35,45)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1039.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (26 samples, 0.01%)</title><rect x="31.9870%" y="1013" width="0.0104%" height="15" fill="rgb(251,115,12)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1023.50"></text></g><g><title>std::rt::lang_start::{{closure}} (26 samples, 0.01%)</title><rect x="31.9870%" y="997" width="0.0104%" height="15" fill="rgb(240,54,50)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="1007.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26 samples, 0.01%)</title><rect x="31.9870%" y="981" width="0.0104%" height="15" fill="rgb(233,84,52)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (26 samples, 0.01%)</title><rect x="31.9870%" y="965" width="0.0104%" height="15" fill="rgb(207,117,47)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="975.50"></text></g><g><title>sssim::main (26 samples, 0.01%)</title><rect x="31.9870%" y="949" width="0.0104%" height="15" fill="rgb(249,43,39)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="959.50"></text></g><g><title>sssim::run_batch (26 samples, 0.01%)</title><rect x="31.9870%" y="933" width="0.0104%" height="15" fill="rgb(209,38,44)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="943.50"></text></g><g><title>time::duration::Duration::time_fn (26 samples, 0.01%)</title><rect x="31.9870%" y="917" width="0.0104%" height="15" fill="rgb(236,212,23)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="927.50"></text></g><g><title>sssim::run_batch::{{closure}} (26 samples, 0.01%)</title><rect x="31.9870%" y="901" width="0.0104%" height="15" fill="rgb(242,79,21)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="911.50"></text></g><g><title>sssim::batch_update_trials (26 samples, 0.01%)</title><rect x="31.9870%" y="885" width="0.0104%" height="15" fill="rgb(211,96,35)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="895.50"></text></g><g><title>time::duration::Duration::time_fn (26 samples, 0.01%)</title><rect x="31.9870%" y="869" width="0.0104%" height="15" fill="rgb(253,215,40)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="879.50"></text></g><g><title>sssim::batch_update_trials::{{closure}} (26 samples, 0.01%)</title><rect x="31.9870%" y="853" width="0.0104%" height="15" fill="rgb(211,81,21)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="863.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (26 samples, 0.01%)</title><rect x="31.9870%" y="837" width="0.0104%" height="15" fill="rgb(208,190,38)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="847.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch (26 samples, 0.01%)</title><rect x="31.9870%" y="821" width="0.0104%" height="15" fill="rgb(235,213,38)" fg:x="80337" fg:w="26"/><text x="32.2370%" y="831.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (32 samples, 0.01%)</title><rect x="32.0010%" y="1157" width="0.0127%" height="15" fill="rgb(237,122,38)" fg:x="80372" fg:w="32"/><text x="32.2510%" y="1167.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (29 samples, 0.01%)</title><rect x="32.0137%" y="901" width="0.0115%" height="15" fill="rgb(244,218,35)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="911.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (29 samples, 0.01%)</title><rect x="32.0137%" y="885" width="0.0115%" height="15" fill="rgb(240,68,47)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="895.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (29 samples, 0.01%)</title><rect x="32.0137%" y="869" width="0.0115%" height="15" fill="rgb(210,16,53)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="879.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (29 samples, 0.01%)</title><rect x="32.0137%" y="853" width="0.0115%" height="15" fill="rgb(235,124,12)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="863.50"></text></g><g><title>rayon_core::join::join_context (29 samples, 0.01%)</title><rect x="32.0137%" y="837" width="0.0115%" height="15" fill="rgb(224,169,11)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="847.50"></text></g><g><title>rayon_core::registry::in_worker (29 samples, 0.01%)</title><rect x="32.0137%" y="821" width="0.0115%" height="15" fill="rgb(250,166,2)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="831.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (29 samples, 0.01%)</title><rect x="32.0137%" y="805" width="0.0115%" height="15" fill="rgb(242,216,29)" fg:x="80404" fg:w="29"/><text x="32.2637%" y="815.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (49 samples, 0.02%)</title><rect x="32.0137%" y="1157" width="0.0195%" height="15" fill="rgb(230,116,27)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1167.50"></text></g><g><title>rayon_core::registry::main_loop (49 samples, 0.02%)</title><rect x="32.0137%" y="1141" width="0.0195%" height="15" fill="rgb(228,99,48)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1151.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (49 samples, 0.02%)</title><rect x="32.0137%" y="1125" width="0.0195%" height="15" fill="rgb(253,11,6)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1135.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (49 samples, 0.02%)</title><rect x="32.0137%" y="1109" width="0.0195%" height="15" fill="rgb(247,143,39)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1119.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (49 samples, 0.02%)</title><rect x="32.0137%" y="1093" width="0.0195%" height="15" fill="rgb(236,97,10)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1103.50"></text></g><g><title>rayon_core::job::JobRef::execute (49 samples, 0.02%)</title><rect x="32.0137%" y="1077" width="0.0195%" height="15" fill="rgb(233,208,19)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1087.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (49 samples, 0.02%)</title><rect x="32.0137%" y="1061" width="0.0195%" height="15" fill="rgb(216,164,2)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1071.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (49 samples, 0.02%)</title><rect x="32.0137%" y="1045" width="0.0195%" height="15" fill="rgb(220,129,5)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1055.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (49 samples, 0.02%)</title><rect x="32.0137%" y="1029" width="0.0195%" height="15" fill="rgb(242,17,10)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1039.50"></text></g><g><title>std::panic::catch_unwind (49 samples, 0.02%)</title><rect x="32.0137%" y="1013" width="0.0195%" height="15" fill="rgb(242,107,0)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1023.50"></text></g><g><title>std::panicking::try (49 samples, 0.02%)</title><rect x="32.0137%" y="997" width="0.0195%" height="15" fill="rgb(251,28,31)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="1007.50"></text></g><g><title>std::panicking::try::do_call (49 samples, 0.02%)</title><rect x="32.0137%" y="981" width="0.0195%" height="15" fill="rgb(233,223,10)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="991.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (49 samples, 0.02%)</title><rect x="32.0137%" y="965" width="0.0195%" height="15" fill="rgb(215,21,27)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="975.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (49 samples, 0.02%)</title><rect x="32.0137%" y="949" width="0.0195%" height="15" fill="rgb(232,23,21)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="959.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (49 samples, 0.02%)</title><rect x="32.0137%" y="933" width="0.0195%" height="15" fill="rgb(244,5,23)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="943.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (49 samples, 0.02%)</title><rect x="32.0137%" y="917" width="0.0195%" height="15" fill="rgb(226,81,46)" fg:x="80404" fg:w="49"/><text x="32.2637%" y="927.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (1,047 samples, 0.42%)</title><rect x="32.0340%" y="1077" width="0.4169%" height="15" fill="rgb(247,70,30)" fg:x="80455" fg:w="1047"/><text x="32.2840%" y="1087.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (1,047 samples, 0.42%)</title><rect x="32.0340%" y="1061" width="0.4169%" height="15" fill="rgb(212,68,19)" fg:x="80455" fg:w="1047"/><text x="32.2840%" y="1071.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (1,047 samples, 0.42%)</title><rect x="32.0340%" y="1045" width="0.4169%" height="15" fill="rgb(240,187,13)" fg:x="80455" fg:w="1047"/><text x="32.2840%" y="1055.50"></text></g><g><title>__gmpz_powm (1,047 samples, 0.42%)</title><rect x="32.0340%" y="1029" width="0.4169%" height="15" fill="rgb(223,113,26)" fg:x="80455" fg:w="1047"/><text x="32.2840%" y="1039.50"></text></g><g><title>__gmpn_powm (1,047 samples, 0.42%)</title><rect x="32.0340%" y="1013" width="0.4169%" height="15" fill="rgb(206,192,2)" fg:x="80455" fg:w="1047"/><text x="32.2840%" y="1023.50"></text></g><g><title>__gmpn_sqr (1,047 samples, 0.42%)</title><rect x="32.0340%" y="997" width="0.4169%" height="15" fill="rgb(241,108,4)" fg:x="80455" fg:w="1047"/><text x="32.2840%" y="1007.50"></text></g><g><title>__gmpn_toom2_sqr.localalias (953 samples, 0.38%)</title><rect x="32.0714%" y="981" width="0.3794%" height="15" fill="rgb(247,173,49)" fg:x="80549" fg:w="953"/><text x="32.3214%" y="991.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (493 samples, 0.20%)</title><rect x="32.4517%" y="1029" width="0.1963%" height="15" fill="rgb(224,114,35)" fg:x="81504" fg:w="493"/><text x="32.7017%" y="1039.50"></text></g><g><title>__gmpz_powm (493 samples, 0.20%)</title><rect x="32.4517%" y="1013" width="0.1963%" height="15" fill="rgb(245,159,27)" fg:x="81504" fg:w="493"/><text x="32.7017%" y="1023.50"></text></g><g><title>__gmpn_powm (493 samples, 0.20%)</title><rect x="32.4517%" y="997" width="0.1963%" height="15" fill="rgb(245,172,44)" fg:x="81504" fg:w="493"/><text x="32.7017%" y="1007.50"></text></g><g><title>__gmpn_sqr (493 samples, 0.20%)</title><rect x="32.4517%" y="981" width="0.1963%" height="15" fill="rgb(236,23,11)" fg:x="81504" fg:w="493"/><text x="32.7017%" y="991.50"></text></g><g><title>__gmpn_toom2_sqr.localalias (460 samples, 0.18%)</title><rect x="32.4648%" y="965" width="0.1832%" height="15" fill="rgb(205,117,38)" fg:x="81537" fg:w="460"/><text x="32.7148%" y="975.50"></text></g><g><title>sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt;::update (1,054 samples, 0.42%)</title><rect x="32.4517%" y="1077" width="0.4197%" height="15" fill="rgb(237,72,25)" fg:x="81504" fg:w="1054"/><text x="32.7017%" y="1087.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (1,054 samples, 0.42%)</title><rect x="32.4517%" y="1061" width="0.4197%" height="15" fill="rgb(244,70,9)" fg:x="81504" fg:w="1054"/><text x="32.7017%" y="1071.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (1,054 samples, 0.42%)</title><rect x="32.4517%" y="1045" width="0.4197%" height="15" fill="rgb(217,125,39)" fg:x="81504" fg:w="1054"/><text x="32.7017%" y="1055.50"></text></g><g><title>rug::integer::big::Integer::pow_mod_mut (561 samples, 0.22%)</title><rect x="32.6480%" y="1029" width="0.2234%" height="15" fill="rgb(235,36,10)" fg:x="81997" fg:w="561"/><text x="32.8980%" y="1039.50"></text></g><g><title>rug::ext::xmpz::pow_mod (561 samples, 0.22%)</title><rect x="32.6480%" y="1013" width="0.2234%" height="15" fill="rgb(251,123,47)" fg:x="81997" fg:w="561"/><text x="32.8980%" y="1023.50"></text></g><g><title>__gmpz_powm (561 samples, 0.22%)</title><rect x="32.6480%" y="997" width="0.2234%" height="15" fill="rgb(221,13,13)" fg:x="81997" fg:w="561"/><text x="32.8980%" y="1007.50"></text></g><g><title>__gmpn_powm (561 samples, 0.22%)</title><rect x="32.6480%" y="981" width="0.2234%" height="15" fill="rgb(238,131,9)" fg:x="81997" fg:w="561"/><text x="32.8980%" y="991.50"></text></g><g><title>__gmpn_sqr (561 samples, 0.22%)</title><rect x="32.6480%" y="965" width="0.2234%" height="15" fill="rgb(211,50,8)" fg:x="81997" fg:w="561"/><text x="32.8980%" y="975.50"></text></g><g><title>__gmpn_toom2_sqr.localalias (520 samples, 0.21%)</title><rect x="32.6643%" y="949" width="0.2070%" height="15" fill="rgb(245,182,24)" fg:x="82038" fg:w="520"/><text x="32.9143%" y="959.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch (2,116 samples, 0.84%)</title><rect x="32.0332%" y="1093" width="0.8425%" height="15" fill="rgb(242,14,37)" fg:x="80453" fg:w="2116"/><text x="32.2832%" y="1103.50"></text></g><g><title>sssim::batch_update_trials (2,122 samples, 0.84%)</title><rect x="32.0332%" y="1157" width="0.8449%" height="15" fill="rgb(246,228,12)" fg:x="80453" fg:w="2122"/><text x="32.2832%" y="1167.50"></text></g><g><title>time::duration::Duration::time_fn (2,122 samples, 0.84%)</title><rect x="32.0332%" y="1141" width="0.8449%" height="15" fill="rgb(213,55,15)" fg:x="80453" fg:w="2122"/><text x="32.2832%" y="1151.50"></text></g><g><title>sssim::batch_update_trials::{{closure}} (2,122 samples, 0.84%)</title><rect x="32.0332%" y="1125" width="0.8449%" height="15" fill="rgb(209,9,3)" fg:x="80453" fg:w="2122"/><text x="32.2832%" y="1135.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (2,122 samples, 0.84%)</title><rect x="32.0332%" y="1109" width="0.8449%" height="15" fill="rgb(230,59,30)" fg:x="80453" fg:w="2122"/><text x="32.2832%" y="1119.50"></text></g><g><title>__gmpn_add_n_x86_64 (28 samples, 0.01%)</title><rect x="32.8924%" y="725" width="0.0111%" height="15" fill="rgb(209,121,21)" fg:x="82611" fg:w="28"/><text x="33.1424%" y="735.50"></text></g><g><title>__gmpn_redc_1_fat (63 samples, 0.03%)</title><rect x="32.9211%" y="709" width="0.0251%" height="15" fill="rgb(220,109,13)" fg:x="82683" fg:w="63"/><text x="33.1711%" y="719.50"></text></g><g><title>__gmpn_powm (106 samples, 0.04%)</title><rect x="32.9048%" y="725" width="0.0422%" height="15" fill="rgb(232,18,1)" fg:x="82642" fg:w="106"/><text x="33.1548%" y="735.50"></text></g><g><title>sssim::batch_update_trials (187 samples, 0.07%)</title><rect x="32.8781%" y="1093" width="0.0745%" height="15" fill="rgb(215,41,42)" fg:x="82575" fg:w="187"/><text x="33.1281%" y="1103.50"></text></g><g><title>time::duration::Duration::time_fn (174 samples, 0.07%)</title><rect x="32.8833%" y="1077" width="0.0693%" height="15" fill="rgb(224,123,36)" fg:x="82588" fg:w="174"/><text x="33.1333%" y="1087.50"></text></g><g><title>sssim::batch_update_trials::{{closure}} (174 samples, 0.07%)</title><rect x="32.8833%" y="1061" width="0.0693%" height="15" fill="rgb(240,125,3)" fg:x="82588" fg:w="174"/><text x="33.1333%" y="1071.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (174 samples, 0.07%)</title><rect x="32.8833%" y="1045" width="0.0693%" height="15" fill="rgb(205,98,50)" fg:x="82588" fg:w="174"/><text x="33.1333%" y="1055.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::BatchAuthenticator&gt;::batch_prove (170 samples, 0.07%)</title><rect x="32.8849%" y="1029" width="0.0677%" height="15" fill="rgb(205,185,37)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (170 samples, 0.07%)</title><rect x="32.8849%" y="1013" width="0.0677%" height="15" fill="rgb(238,207,15)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="1023.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (170 samples, 0.07%)</title><rect x="32.8849%" y="997" width="0.0677%" height="15" fill="rgb(213,199,42)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="1007.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (170 samples, 0.07%)</title><rect x="32.8849%" y="981" width="0.0677%" height="15" fill="rgb(235,201,11)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="991.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (170 samples, 0.07%)</title><rect x="32.8849%" y="965" width="0.0677%" height="15" fill="rgb(207,46,11)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (170 samples, 0.07%)</title><rect x="32.8849%" y="949" width="0.0677%" height="15" fill="rgb(241,35,35)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="959.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (170 samples, 0.07%)</title><rect x="32.8849%" y="933" width="0.0677%" height="15" fill="rgb(243,32,47)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="943.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (170 samples, 0.07%)</title><rect x="32.8849%" y="917" width="0.0677%" height="15" fill="rgb(247,202,23)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="927.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (170 samples, 0.07%)</title><rect x="32.8849%" y="901" width="0.0677%" height="15" fill="rgb(219,102,11)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="911.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::BatchAuthenticator&gt;::batch_prove::{{closure}} (170 samples, 0.07%)</title><rect x="32.8849%" y="885" width="0.0677%" height="15" fill="rgb(243,110,44)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="895.50"></text></g><g><title>sssim::authenticator::rsa::hash_package (170 samples, 0.07%)</title><rect x="32.8849%" y="869" width="0.0677%" height="15" fill="rgb(222,74,54)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="879.50"></text></g><g><title>sssim::hash_to_prime::hash_to_prime (170 samples, 0.07%)</title><rect x="32.8849%" y="853" width="0.0677%" height="15" fill="rgb(216,99,12)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="863.50"></text></g><g><title>&lt;sssim::primitives::prime::Prime as core::convert::TryFrom&lt;rug::integer::big::Integer&gt;&gt;::try_from (170 samples, 0.07%)</title><rect x="32.8849%" y="837" width="0.0677%" height="15" fill="rgb(226,22,26)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="847.50"></text></g><g><title>rug::integer::big::Integer::is_probably_prime (170 samples, 0.07%)</title><rect x="32.8849%" y="821" width="0.0677%" height="15" fill="rgb(217,163,10)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="831.50"></text></g><g><title>rug::ext::xmpz::probab_prime_p (170 samples, 0.07%)</title><rect x="32.8849%" y="805" width="0.0677%" height="15" fill="rgb(213,25,53)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="815.50"></text></g><g><title>__gmpz_probab_prime_p (170 samples, 0.07%)</title><rect x="32.8849%" y="789" width="0.0677%" height="15" fill="rgb(252,105,26)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="799.50"></text></g><g><title>__gmpz_millerrabin (170 samples, 0.07%)</title><rect x="32.8849%" y="773" width="0.0677%" height="15" fill="rgb(220,39,43)" fg:x="82592" fg:w="170"/><text x="33.1349%" y="783.50"></text></g><g><title>millerrabin (151 samples, 0.06%)</title><rect x="32.8924%" y="757" width="0.0601%" height="15" fill="rgb(229,68,48)" fg:x="82611" fg:w="151"/><text x="33.1424%" y="767.50"></text></g><g><title>__gmpz_powm (151 samples, 0.06%)</title><rect x="32.8924%" y="741" width="0.0601%" height="15" fill="rgb(252,8,32)" fg:x="82611" fg:w="151"/><text x="33.1424%" y="751.50"></text></g><g><title>sssim::main (192 samples, 0.08%)</title><rect x="32.8781%" y="1157" width="0.0764%" height="15" fill="rgb(223,20,43)" fg:x="82575" fg:w="192"/><text x="33.1281%" y="1167.50"></text></g><g><title>sssim::run_batch (192 samples, 0.08%)</title><rect x="32.8781%" y="1141" width="0.0764%" height="15" fill="rgb(229,81,49)" fg:x="82575" fg:w="192"/><text x="33.1281%" y="1151.50"></text></g><g><title>time::duration::Duration::time_fn (192 samples, 0.08%)</title><rect x="32.8781%" y="1125" width="0.0764%" height="15" fill="rgb(236,28,36)" fg:x="82575" fg:w="192"/><text x="33.1281%" y="1135.50"></text></g><g><title>sssim::run_batch::{{closure}} (192 samples, 0.08%)</title><rect x="32.8781%" y="1109" width="0.0764%" height="15" fill="rgb(249,185,26)" fg:x="82575" fg:w="192"/><text x="33.1281%" y="1119.50"></text></g><g><title>std::panicking::try (35 samples, 0.01%)</title><rect x="32.9545%" y="1157" width="0.0139%" height="15" fill="rgb(249,174,33)" fg:x="82767" fg:w="35"/><text x="33.2045%" y="1167.50"></text></g><g><title>std::panicking::try::do_call (35 samples, 0.01%)</title><rect x="32.9545%" y="1141" width="0.0139%" height="15" fill="rgb(233,201,37)" fg:x="82767" fg:w="35"/><text x="33.2045%" y="1151.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (35 samples, 0.01%)</title><rect x="32.9545%" y="1125" width="0.0139%" height="15" fill="rgb(221,78,26)" fg:x="82767" fg:w="35"/><text x="33.2045%" y="1135.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (35 samples, 0.01%)</title><rect x="32.9545%" y="1109" width="0.0139%" height="15" fill="rgb(250,127,30)" fg:x="82767" fg:w="35"/><text x="33.2045%" y="1119.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (35 samples, 0.01%)</title><rect x="32.9545%" y="1093" width="0.0139%" height="15" fill="rgb(230,49,44)" fg:x="82767" fg:w="35"/><text x="33.2045%" y="1103.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (35 samples, 0.01%)</title><rect x="32.9545%" y="1077" width="0.0139%" height="15" fill="rgb(229,67,23)" fg:x="82767" fg:w="35"/><text x="33.2045%" y="1087.50"></text></g><g><title>sssim::batch_update_trials (52 samples, 0.02%)</title><rect x="32.9685%" y="901" width="0.0207%" height="15" fill="rgb(249,83,47)" fg:x="82802" fg:w="52"/><text x="33.2185%" y="911.50"></text></g><g><title>time::duration::Duration::time_fn (52 samples, 0.02%)</title><rect x="32.9685%" y="885" width="0.0207%" height="15" fill="rgb(215,43,3)" fg:x="82802" fg:w="52"/><text x="33.2185%" y="895.50"></text></g><g><title>sssim::batch_update_trials::{{closure}} (52 samples, 0.02%)</title><rect x="32.9685%" y="869" width="0.0207%" height="15" fill="rgb(238,154,13)" fg:x="82802" fg:w="52"/><text x="33.2185%" y="879.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (52 samples, 0.02%)</title><rect x="32.9685%" y="853" width="0.0207%" height="15" fill="rgb(219,56,2)" fg:x="82802" fg:w="52"/><text x="33.2185%" y="863.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::BatchAuthenticator&gt;::batch_prove (33 samples, 0.01%)</title><rect x="32.9761%" y="837" width="0.0131%" height="15" fill="rgb(233,0,4)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (33 samples, 0.01%)</title><rect x="32.9761%" y="821" width="0.0131%" height="15" fill="rgb(235,30,7)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (33 samples, 0.01%)</title><rect x="32.9761%" y="805" width="0.0131%" height="15" fill="rgb(250,79,13)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="815.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (33 samples, 0.01%)</title><rect x="32.9761%" y="789" width="0.0131%" height="15" fill="rgb(211,146,34)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (33 samples, 0.01%)</title><rect x="32.9761%" y="773" width="0.0131%" height="15" fill="rgb(228,22,38)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (33 samples, 0.01%)</title><rect x="32.9761%" y="757" width="0.0131%" height="15" fill="rgb(235,168,5)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.01%)</title><rect x="32.9761%" y="741" width="0.0131%" height="15" fill="rgb(221,155,16)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (33 samples, 0.01%)</title><rect x="32.9761%" y="725" width="0.0131%" height="15" fill="rgb(215,215,53)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (33 samples, 0.01%)</title><rect x="32.9761%" y="709" width="0.0131%" height="15" fill="rgb(223,4,10)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="719.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::BatchAuthenticator&gt;::batch_prove::{{closure}} (33 samples, 0.01%)</title><rect x="32.9761%" y="693" width="0.0131%" height="15" fill="rgb(234,103,6)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="703.50"></text></g><g><title>sssim::authenticator::rsa::hash_package (33 samples, 0.01%)</title><rect x="32.9761%" y="677" width="0.0131%" height="15" fill="rgb(227,97,0)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="687.50"></text></g><g><title>sssim::hash_to_prime::hash_to_prime (33 samples, 0.01%)</title><rect x="32.9761%" y="661" width="0.0131%" height="15" fill="rgb(234,150,53)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="671.50"></text></g><g><title>&lt;sssim::primitives::prime::Prime as core::convert::TryFrom&lt;rug::integer::big::Integer&gt;&gt;::try_from (33 samples, 0.01%)</title><rect x="32.9761%" y="645" width="0.0131%" height="15" fill="rgb(228,201,54)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="655.50"></text></g><g><title>rug::integer::big::Integer::is_probably_prime (33 samples, 0.01%)</title><rect x="32.9761%" y="629" width="0.0131%" height="15" fill="rgb(222,22,37)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="639.50"></text></g><g><title>rug::ext::xmpz::probab_prime_p (33 samples, 0.01%)</title><rect x="32.9761%" y="613" width="0.0131%" height="15" fill="rgb(237,53,32)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="623.50"></text></g><g><title>__gmpz_probab_prime_p (33 samples, 0.01%)</title><rect x="32.9761%" y="597" width="0.0131%" height="15" fill="rgb(233,25,53)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="607.50"></text></g><g><title>__gmpz_millerrabin (33 samples, 0.01%)</title><rect x="32.9761%" y="581" width="0.0131%" height="15" fill="rgb(210,40,34)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="591.50"></text></g><g><title>__gmpz_stronglucas (33 samples, 0.01%)</title><rect x="32.9761%" y="565" width="0.0131%" height="15" fill="rgb(241,220,44)" fg:x="82821" fg:w="33"/><text x="33.2261%" y="575.50"></text></g><g><title>std::rt::lang_start_internal (54 samples, 0.02%)</title><rect x="32.9685%" y="1157" width="0.0215%" height="15" fill="rgb(235,28,35)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (54 samples, 0.02%)</title><rect x="32.9685%" y="1141" width="0.0215%" height="15" fill="rgb(210,56,17)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1151.50"></text></g><g><title>std::panicking::try (54 samples, 0.02%)</title><rect x="32.9685%" y="1125" width="0.0215%" height="15" fill="rgb(224,130,29)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1135.50"></text></g><g><title>std::panicking::try::do_call (54 samples, 0.02%)</title><rect x="32.9685%" y="1109" width="0.0215%" height="15" fill="rgb(235,212,8)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1119.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (54 samples, 0.02%)</title><rect x="32.9685%" y="1093" width="0.0215%" height="15" fill="rgb(223,33,50)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1103.50"></text></g><g><title>std::panic::catch_unwind (54 samples, 0.02%)</title><rect x="32.9685%" y="1077" width="0.0215%" height="15" fill="rgb(219,149,13)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1087.50"></text></g><g><title>std::panicking::try (54 samples, 0.02%)</title><rect x="32.9685%" y="1061" width="0.0215%" height="15" fill="rgb(250,156,29)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1071.50"></text></g><g><title>std::panicking::try::do_call (54 samples, 0.02%)</title><rect x="32.9685%" y="1045" width="0.0215%" height="15" fill="rgb(216,193,19)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1055.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (54 samples, 0.02%)</title><rect x="32.9685%" y="1029" width="0.0215%" height="15" fill="rgb(216,135,14)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1039.50"></text></g><g><title>std::rt::lang_start::{{closure}} (54 samples, 0.02%)</title><rect x="32.9685%" y="1013" width="0.0215%" height="15" fill="rgb(241,47,5)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1023.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (54 samples, 0.02%)</title><rect x="32.9685%" y="997" width="0.0215%" height="15" fill="rgb(233,42,35)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once (54 samples, 0.02%)</title><rect x="32.9685%" y="981" width="0.0215%" height="15" fill="rgb(231,13,6)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="991.50"></text></g><g><title>sssim::main (54 samples, 0.02%)</title><rect x="32.9685%" y="965" width="0.0215%" height="15" fill="rgb(207,181,40)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="975.50"></text></g><g><title>sssim::run_batch (54 samples, 0.02%)</title><rect x="32.9685%" y="949" width="0.0215%" height="15" fill="rgb(254,173,49)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="959.50"></text></g><g><title>time::duration::Duration::time_fn (54 samples, 0.02%)</title><rect x="32.9685%" y="933" width="0.0215%" height="15" fill="rgb(221,1,38)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="943.50"></text></g><g><title>sssim::run_batch::{{closure}} (54 samples, 0.02%)</title><rect x="32.9685%" y="917" width="0.0215%" height="15" fill="rgb(206,124,46)" fg:x="82802" fg:w="54"/><text x="33.2185%" y="927.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (752 samples, 0.30%)</title><rect x="32.9948%" y="1045" width="0.2994%" height="15" fill="rgb(249,21,11)" fg:x="82868" fg:w="752"/><text x="33.2448%" y="1055.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (752 samples, 0.30%)</title><rect x="32.9948%" y="1029" width="0.2994%" height="15" fill="rgb(222,201,40)" fg:x="82868" fg:w="752"/><text x="33.2448%" y="1039.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (752 samples, 0.30%)</title><rect x="32.9948%" y="1013" width="0.2994%" height="15" fill="rgb(235,61,29)" fg:x="82868" fg:w="752"/><text x="33.2448%" y="1023.50"></text></g><g><title>__gmpz_powm (752 samples, 0.30%)</title><rect x="32.9948%" y="997" width="0.2994%" height="15" fill="rgb(219,207,3)" fg:x="82868" fg:w="752"/><text x="33.2448%" y="1007.50"></text></g><g><title>__gmpn_powm (752 samples, 0.30%)</title><rect x="32.9948%" y="981" width="0.2994%" height="15" fill="rgb(222,56,46)" fg:x="82868" fg:w="752"/><text x="33.2448%" y="991.50"></text></g><g><title>__gmpn_mul_n (752 samples, 0.30%)</title><rect x="32.9948%" y="965" width="0.2994%" height="15" fill="rgb(239,76,54)" fg:x="82868" fg:w="752"/><text x="33.2448%" y="975.50"></text></g><g><title>__gmpn_toom22_mul.localalias (715 samples, 0.28%)</title><rect x="33.0095%" y="949" width="0.2847%" height="15" fill="rgb(231,124,27)" fg:x="82905" fg:w="715"/><text x="33.2595%" y="959.50"></text></g><g><title>__gmpn_toom22_mul.localalias (401 samples, 0.16%)</title><rect x="33.1345%" y="933" width="0.1597%" height="15" fill="rgb(249,195,6)" fg:x="83219" fg:w="401"/><text x="33.3845%" y="943.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (357 samples, 0.14%)</title><rect x="33.2946%" y="997" width="0.1421%" height="15" fill="rgb(237,174,47)" fg:x="83621" fg:w="357"/><text x="33.5446%" y="1007.50"></text></g><g><title>__gmpz_powm (357 samples, 0.14%)</title><rect x="33.2946%" y="981" width="0.1421%" height="15" fill="rgb(206,201,31)" fg:x="83621" fg:w="357"/><text x="33.5446%" y="991.50"></text></g><g><title>__gmpn_powm (357 samples, 0.14%)</title><rect x="33.2946%" y="965" width="0.1421%" height="15" fill="rgb(231,57,52)" fg:x="83621" fg:w="357"/><text x="33.5446%" y="975.50"></text></g><g><title>__gmpn_mul_n (357 samples, 0.14%)</title><rect x="33.2946%" y="949" width="0.1421%" height="15" fill="rgb(248,177,22)" fg:x="83621" fg:w="357"/><text x="33.5446%" y="959.50"></text></g><g><title>__gmpn_toom22_mul.localalias (346 samples, 0.14%)</title><rect x="33.2990%" y="933" width="0.1378%" height="15" fill="rgb(215,211,37)" fg:x="83632" fg:w="346"/><text x="33.5490%" y="943.50"></text></g><g><title>__gmpn_toom22_mul.localalias (208 samples, 0.08%)</title><rect x="33.3539%" y="917" width="0.0828%" height="15" fill="rgb(241,128,51)" fg:x="83770" fg:w="208"/><text x="33.6039%" y="927.50"></text></g><g><title>sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt;::update (745 samples, 0.30%)</title><rect x="33.2946%" y="1045" width="0.2966%" height="15" fill="rgb(227,165,31)" fg:x="83621" fg:w="745"/><text x="33.5446%" y="1055.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (745 samples, 0.30%)</title><rect x="33.2946%" y="1029" width="0.2966%" height="15" fill="rgb(228,167,24)" fg:x="83621" fg:w="745"/><text x="33.5446%" y="1039.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (745 samples, 0.30%)</title><rect x="33.2946%" y="1013" width="0.2966%" height="15" fill="rgb(228,143,12)" fg:x="83621" fg:w="745"/><text x="33.5446%" y="1023.50"></text></g><g><title>rug::integer::big::Integer::pow_mod_mut (388 samples, 0.15%)</title><rect x="33.4367%" y="997" width="0.1545%" height="15" fill="rgb(249,149,8)" fg:x="83978" fg:w="388"/><text x="33.6867%" y="1007.50"></text></g><g><title>rug::ext::xmpz::pow_mod (388 samples, 0.15%)</title><rect x="33.4367%" y="981" width="0.1545%" height="15" fill="rgb(243,35,44)" fg:x="83978" fg:w="388"/><text x="33.6867%" y="991.50"></text></g><g><title>__gmpz_powm (388 samples, 0.15%)</title><rect x="33.4367%" y="965" width="0.1545%" height="15" fill="rgb(246,89,9)" fg:x="83978" fg:w="388"/><text x="33.6867%" y="975.50"></text></g><g><title>__gmpn_powm (388 samples, 0.15%)</title><rect x="33.4367%" y="949" width="0.1545%" height="15" fill="rgb(233,213,13)" fg:x="83978" fg:w="388"/><text x="33.6867%" y="959.50"></text></g><g><title>__gmpn_mul_n (388 samples, 0.15%)</title><rect x="33.4367%" y="933" width="0.1545%" height="15" fill="rgb(233,141,41)" fg:x="83978" fg:w="388"/><text x="33.6867%" y="943.50"></text></g><g><title>__gmpn_toom22_mul.localalias (371 samples, 0.15%)</title><rect x="33.4435%" y="917" width="0.1477%" height="15" fill="rgb(239,167,4)" fg:x="83995" fg:w="371"/><text x="33.6935%" y="927.50"></text></g><g><title>__gmpn_toom22_mul.localalias (219 samples, 0.09%)</title><rect x="33.5040%" y="901" width="0.0872%" height="15" fill="rgb(209,217,16)" fg:x="84147" fg:w="219"/><text x="33.7540%" y="911.50"></text></g><g><title>[unknown] (84,361 samples, 33.59%)</title><rect x="0.0036%" y="1173" width="33.5892%" height="15" fill="rgb(219,88,35)" fg:x="9" fg:w="84361"/><text x="0.2536%" y="1183.50">[unknown]</text></g><g><title>time::duration::Duration::time_fn (1,504 samples, 0.60%)</title><rect x="32.9940%" y="1157" width="0.5988%" height="15" fill="rgb(220,193,23)" fg:x="82866" fg:w="1504"/><text x="33.2440%" y="1167.50"></text></g><g><title>sssim::run_batch::{{closure}} (1,504 samples, 0.60%)</title><rect x="32.9940%" y="1141" width="0.5988%" height="15" fill="rgb(230,90,52)" fg:x="82866" fg:w="1504"/><text x="33.2440%" y="1151.50"></text></g><g><title>sssim::batch_update_trials (1,504 samples, 0.60%)</title><rect x="32.9940%" y="1125" width="0.5988%" height="15" fill="rgb(252,106,19)" fg:x="82866" fg:w="1504"/><text x="33.2440%" y="1135.50"></text></g><g><title>time::duration::Duration::time_fn (1,504 samples, 0.60%)</title><rect x="32.9940%" y="1109" width="0.5988%" height="15" fill="rgb(206,74,20)" fg:x="82866" fg:w="1504"/><text x="33.2440%" y="1119.50"></text></g><g><title>sssim::batch_update_trials::{{closure}} (1,504 samples, 0.60%)</title><rect x="32.9940%" y="1093" width="0.5988%" height="15" fill="rgb(230,138,44)" fg:x="82866" fg:w="1504"/><text x="33.2440%" y="1103.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (1,503 samples, 0.60%)</title><rect x="32.9944%" y="1077" width="0.5984%" height="15" fill="rgb(235,182,43)" fg:x="82867" fg:w="1503"/><text x="33.2444%" y="1087.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch (1,503 samples, 0.60%)</title><rect x="32.9944%" y="1061" width="0.5984%" height="15" fill="rgb(242,16,51)" fg:x="82867" fg:w="1503"/><text x="33.2444%" y="1071.50"></text></g><g><title>__gmpn_redc_2_fat (34 samples, 0.01%)</title><rect x="33.5948%" y="213" width="0.0135%" height="15" fill="rgb(248,9,4)" fg:x="84375" fg:w="34"/><text x="33.8448%" y="223.50"></text></g><g><title>__gmpn_powm (39 samples, 0.02%)</title><rect x="33.5936%" y="229" width="0.0155%" height="15" fill="rgb(210,31,22)" fg:x="84372" fg:w="39"/><text x="33.8436%" y="239.50"></text></g><g><title>sssim::accumulator::rsa::MembershipWitness&lt;G&gt;::update (43 samples, 0.02%)</title><rect x="33.5936%" y="293" width="0.0171%" height="15" fill="rgb(239,54,39)" fg:x="84372" fg:w="43"/><text x="33.8436%" y="303.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (43 samples, 0.02%)</title><rect x="33.5936%" y="277" width="0.0171%" height="15" fill="rgb(230,99,41)" fg:x="84372" fg:w="43"/><text x="33.8436%" y="287.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (43 samples, 0.02%)</title><rect x="33.5936%" y="261" width="0.0171%" height="15" fill="rgb(253,106,12)" fg:x="84372" fg:w="43"/><text x="33.8436%" y="271.50"></text></g><g><title>__gmpz_powm (43 samples, 0.02%)</title><rect x="33.5936%" y="245" width="0.0171%" height="15" fill="rgb(213,46,41)" fg:x="84372" fg:w="43"/><text x="33.8436%" y="255.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (76 samples, 0.03%)</title><rect x="33.5936%" y="469" width="0.0303%" height="15" fill="rgb(215,133,35)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="479.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (76 samples, 0.03%)</title><rect x="33.5936%" y="453" width="0.0303%" height="15" fill="rgb(213,28,5)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="463.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (76 samples, 0.03%)</title><rect x="33.5936%" y="437" width="0.0303%" height="15" fill="rgb(215,77,49)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (76 samples, 0.03%)</title><rect x="33.5936%" y="421" width="0.0303%" height="15" fill="rgb(248,100,22)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="431.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (76 samples, 0.03%)</title><rect x="33.5936%" y="405" width="0.0303%" height="15" fill="rgb(208,67,9)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="415.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (76 samples, 0.03%)</title><rect x="33.5936%" y="389" width="0.0303%" height="15" fill="rgb(219,133,21)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (76 samples, 0.03%)</title><rect x="33.5936%" y="373" width="0.0303%" height="15" fill="rgb(246,46,29)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (76 samples, 0.03%)</title><rect x="33.5936%" y="357" width="0.0303%" height="15" fill="rgb(246,185,52)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (76 samples, 0.03%)</title><rect x="33.5936%" y="341" width="0.0303%" height="15" fill="rgb(252,136,11)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (76 samples, 0.03%)</title><rect x="33.5936%" y="325" width="0.0303%" height="15" fill="rgb(219,138,53)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="335.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (76 samples, 0.03%)</title><rect x="33.5936%" y="309" width="0.0303%" height="15" fill="rgb(211,51,23)" fg:x="84372" fg:w="76"/><text x="33.8436%" y="319.50"></text></g><g><title>sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt;::update (33 samples, 0.01%)</title><rect x="33.6107%" y="293" width="0.0131%" height="15" fill="rgb(247,221,28)" fg:x="84415" fg:w="33"/><text x="33.8607%" y="303.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (33 samples, 0.01%)</title><rect x="33.6107%" y="277" width="0.0131%" height="15" fill="rgb(251,222,45)" fg:x="84415" fg:w="33"/><text x="33.8607%" y="287.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (33 samples, 0.01%)</title><rect x="33.6107%" y="261" width="0.0131%" height="15" fill="rgb(217,162,53)" fg:x="84415" fg:w="33"/><text x="33.8607%" y="271.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (113 samples, 0.04%)</title><rect x="33.5936%" y="581" width="0.0450%" height="15" fill="rgb(229,93,14)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="591.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (113 samples, 0.04%)</title><rect x="33.5936%" y="565" width="0.0450%" height="15" fill="rgb(209,67,49)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="575.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (113 samples, 0.04%)</title><rect x="33.5936%" y="549" width="0.0450%" height="15" fill="rgb(213,87,29)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="559.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (113 samples, 0.04%)</title><rect x="33.5936%" y="533" width="0.0450%" height="15" fill="rgb(205,151,52)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="543.50"></text></g><g><title>rayon_core::join::join_context (113 samples, 0.04%)</title><rect x="33.5936%" y="517" width="0.0450%" height="15" fill="rgb(253,215,39)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="527.50"></text></g><g><title>rayon_core::registry::in_worker (113 samples, 0.04%)</title><rect x="33.5936%" y="501" width="0.0450%" height="15" fill="rgb(221,220,41)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="511.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (113 samples, 0.04%)</title><rect x="33.5936%" y="485" width="0.0450%" height="15" fill="rgb(218,133,21)" fg:x="84372" fg:w="113"/><text x="33.8436%" y="495.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (37 samples, 0.01%)</title><rect x="33.6239%" y="469" width="0.0147%" height="15" fill="rgb(221,193,43)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="479.50"></text></g><g><title>std::panic::catch_unwind (37 samples, 0.01%)</title><rect x="33.6239%" y="453" width="0.0147%" height="15" fill="rgb(240,128,52)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="463.50"></text></g><g><title>std::panicking::try (37 samples, 0.01%)</title><rect x="33.6239%" y="437" width="0.0147%" height="15" fill="rgb(253,114,12)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="447.50"></text></g><g><title>std::panicking::try::do_call (37 samples, 0.01%)</title><rect x="33.6239%" y="421" width="0.0147%" height="15" fill="rgb(215,223,47)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="431.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (37 samples, 0.01%)</title><rect x="33.6239%" y="405" width="0.0147%" height="15" fill="rgb(248,225,23)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="415.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (37 samples, 0.01%)</title><rect x="33.6239%" y="389" width="0.0147%" height="15" fill="rgb(250,108,0)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (37 samples, 0.01%)</title><rect x="33.6239%" y="373" width="0.0147%" height="15" fill="rgb(228,208,7)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (37 samples, 0.01%)</title><rect x="33.6239%" y="357" width="0.0147%" height="15" fill="rgb(244,45,10)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="367.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (37 samples, 0.01%)</title><rect x="33.6239%" y="341" width="0.0147%" height="15" fill="rgb(207,125,25)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="351.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (37 samples, 0.01%)</title><rect x="33.6239%" y="325" width="0.0147%" height="15" fill="rgb(210,195,18)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (37 samples, 0.01%)</title><rect x="33.6239%" y="309" width="0.0147%" height="15" fill="rgb(249,80,12)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (37 samples, 0.01%)</title><rect x="33.6239%" y="293" width="0.0147%" height="15" fill="rgb(221,65,9)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (37 samples, 0.01%)</title><rect x="33.6239%" y="277" width="0.0147%" height="15" fill="rgb(235,49,36)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (37 samples, 0.01%)</title><rect x="33.6239%" y="261" width="0.0147%" height="15" fill="rgb(225,32,20)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="271.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (37 samples, 0.01%)</title><rect x="33.6239%" y="245" width="0.0147%" height="15" fill="rgb(215,141,46)" fg:x="84448" fg:w="37"/><text x="33.8739%" y="255.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (26 samples, 0.01%)</title><rect x="33.6458%" y="181" width="0.0104%" height="15" fill="rgb(250,160,47)" fg:x="84503" fg:w="26"/><text x="33.8958%" y="191.50"></text></g><g><title>__gmpz_powm (26 samples, 0.01%)</title><rect x="33.6458%" y="165" width="0.0104%" height="15" fill="rgb(216,222,40)" fg:x="84503" fg:w="26"/><text x="33.8958%" y="175.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (45 samples, 0.02%)</title><rect x="33.6386%" y="405" width="0.0179%" height="15" fill="rgb(234,217,39)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="415.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (45 samples, 0.02%)</title><rect x="33.6386%" y="389" width="0.0179%" height="15" fill="rgb(207,178,40)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (45 samples, 0.02%)</title><rect x="33.6386%" y="373" width="0.0179%" height="15" fill="rgb(221,136,13)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (45 samples, 0.02%)</title><rect x="33.6386%" y="357" width="0.0179%" height="15" fill="rgb(249,199,10)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="367.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (45 samples, 0.02%)</title><rect x="33.6386%" y="341" width="0.0179%" height="15" fill="rgb(249,222,13)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="351.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (45 samples, 0.02%)</title><rect x="33.6386%" y="325" width="0.0179%" height="15" fill="rgb(244,185,38)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (45 samples, 0.02%)</title><rect x="33.6386%" y="309" width="0.0179%" height="15" fill="rgb(236,202,9)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (45 samples, 0.02%)</title><rect x="33.6386%" y="293" width="0.0179%" height="15" fill="rgb(250,229,37)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (45 samples, 0.02%)</title><rect x="33.6386%" y="277" width="0.0179%" height="15" fill="rgb(206,174,23)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (45 samples, 0.02%)</title><rect x="33.6386%" y="261" width="0.0179%" height="15" fill="rgb(211,33,43)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="271.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (45 samples, 0.02%)</title><rect x="33.6386%" y="245" width="0.0179%" height="15" fill="rgb(245,58,50)" fg:x="84485" fg:w="45"/><text x="33.8886%" y="255.50"></text></g><g><title>sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt;::update (27 samples, 0.01%)</title><rect x="33.6458%" y="229" width="0.0108%" height="15" fill="rgb(244,68,36)" fg:x="84503" fg:w="27"/><text x="33.8958%" y="239.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (27 samples, 0.01%)</title><rect x="33.6458%" y="213" width="0.0108%" height="15" fill="rgb(232,229,15)" fg:x="84503" fg:w="27"/><text x="33.8958%" y="223.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (27 samples, 0.01%)</title><rect x="33.6458%" y="197" width="0.0108%" height="15" fill="rgb(254,30,23)" fg:x="84503" fg:w="27"/><text x="33.8958%" y="207.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (198 samples, 0.08%)</title><rect x="33.5936%" y="693" width="0.0788%" height="15" fill="rgb(235,160,14)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="703.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (198 samples, 0.08%)</title><rect x="33.5936%" y="677" width="0.0788%" height="15" fill="rgb(212,155,44)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="687.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (198 samples, 0.08%)</title><rect x="33.5936%" y="661" width="0.0788%" height="15" fill="rgb(226,2,50)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="671.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (198 samples, 0.08%)</title><rect x="33.5936%" y="645" width="0.0788%" height="15" fill="rgb(234,177,6)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="655.50"></text></g><g><title>rayon_core::join::join_context (198 samples, 0.08%)</title><rect x="33.5936%" y="629" width="0.0788%" height="15" fill="rgb(217,24,9)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="639.50"></text></g><g><title>rayon_core::registry::in_worker (198 samples, 0.08%)</title><rect x="33.5936%" y="613" width="0.0788%" height="15" fill="rgb(220,13,46)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="623.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (198 samples, 0.08%)</title><rect x="33.5936%" y="597" width="0.0788%" height="15" fill="rgb(239,221,27)" fg:x="84372" fg:w="198"/><text x="33.8436%" y="607.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (85 samples, 0.03%)</title><rect x="33.6386%" y="581" width="0.0338%" height="15" fill="rgb(222,198,25)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="591.50"></text></g><g><title>std::panic::catch_unwind (85 samples, 0.03%)</title><rect x="33.6386%" y="565" width="0.0338%" height="15" fill="rgb(211,99,13)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="575.50"></text></g><g><title>std::panicking::try (85 samples, 0.03%)</title><rect x="33.6386%" y="549" width="0.0338%" height="15" fill="rgb(232,111,31)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="559.50"></text></g><g><title>std::panicking::try::do_call (85 samples, 0.03%)</title><rect x="33.6386%" y="533" width="0.0338%" height="15" fill="rgb(245,82,37)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="543.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (85 samples, 0.03%)</title><rect x="33.6386%" y="517" width="0.0338%" height="15" fill="rgb(227,149,46)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="527.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (85 samples, 0.03%)</title><rect x="33.6386%" y="501" width="0.0338%" height="15" fill="rgb(218,36,50)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="511.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (85 samples, 0.03%)</title><rect x="33.6386%" y="485" width="0.0338%" height="15" fill="rgb(226,80,48)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="495.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (85 samples, 0.03%)</title><rect x="33.6386%" y="469" width="0.0338%" height="15" fill="rgb(238,224,15)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="479.50"></text></g><g><title>rayon_core::join::join_context (85 samples, 0.03%)</title><rect x="33.6386%" y="453" width="0.0338%" height="15" fill="rgb(241,136,10)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="463.50"></text></g><g><title>rayon_core::registry::in_worker (85 samples, 0.03%)</title><rect x="33.6386%" y="437" width="0.0338%" height="15" fill="rgb(208,32,45)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="447.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (85 samples, 0.03%)</title><rect x="33.6386%" y="421" width="0.0338%" height="15" fill="rgb(207,135,9)" fg:x="84485" fg:w="85"/><text x="33.8886%" y="431.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (40 samples, 0.02%)</title><rect x="33.6565%" y="405" width="0.0159%" height="15" fill="rgb(206,86,44)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="415.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 0.02%)</title><rect x="33.6565%" y="389" width="0.0159%" height="15" fill="rgb(245,177,15)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="399.50"></text></g><g><title>std::panicking::try (40 samples, 0.02%)</title><rect x="33.6565%" y="373" width="0.0159%" height="15" fill="rgb(206,64,50)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="383.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 0.02%)</title><rect x="33.6565%" y="357" width="0.0159%" height="15" fill="rgb(234,36,40)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (40 samples, 0.02%)</title><rect x="33.6565%" y="341" width="0.0159%" height="15" fill="rgb(213,64,8)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="351.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (40 samples, 0.02%)</title><rect x="33.6565%" y="325" width="0.0159%" height="15" fill="rgb(210,75,36)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (40 samples, 0.02%)</title><rect x="33.6565%" y="309" width="0.0159%" height="15" fill="rgb(229,88,21)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (40 samples, 0.02%)</title><rect x="33.6565%" y="293" width="0.0159%" height="15" fill="rgb(252,204,47)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="303.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (40 samples, 0.02%)</title><rect x="33.6565%" y="277" width="0.0159%" height="15" fill="rgb(208,77,27)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="287.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (40 samples, 0.02%)</title><rect x="33.6565%" y="261" width="0.0159%" height="15" fill="rgb(221,76,26)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (40 samples, 0.02%)</title><rect x="33.6565%" y="245" width="0.0159%" height="15" fill="rgb(225,139,18)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (40 samples, 0.02%)</title><rect x="33.6565%" y="229" width="0.0159%" height="15" fill="rgb(230,137,11)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (40 samples, 0.02%)</title><rect x="33.6565%" y="213" width="0.0159%" height="15" fill="rgb(212,28,1)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (40 samples, 0.02%)</title><rect x="33.6565%" y="197" width="0.0159%" height="15" fill="rgb(248,164,17)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="207.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (40 samples, 0.02%)</title><rect x="33.6565%" y="181" width="0.0159%" height="15" fill="rgb(222,171,42)" fg:x="84530" fg:w="40"/><text x="33.9065%" y="191.50"></text></g><g><title>sssim::accumulator::rsa::MembershipWitness&lt;G&gt;::update (38 samples, 0.02%)</title><rect x="33.6724%" y="229" width="0.0151%" height="15" fill="rgb(243,84,45)" fg:x="84570" fg:w="38"/><text x="33.9224%" y="239.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (38 samples, 0.02%)</title><rect x="33.6724%" y="213" width="0.0151%" height="15" fill="rgb(252,49,23)" fg:x="84570" fg:w="38"/><text x="33.9224%" y="223.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (38 samples, 0.02%)</title><rect x="33.6724%" y="197" width="0.0151%" height="15" fill="rgb(215,19,7)" fg:x="84570" fg:w="38"/><text x="33.9224%" y="207.50"></text></g><g><title>__gmpz_powm (38 samples, 0.02%)</title><rect x="33.6724%" y="181" width="0.0151%" height="15" fill="rgb(238,81,41)" fg:x="84570" fg:w="38"/><text x="33.9224%" y="191.50"></text></g><g><title>__gmpn_powm (38 samples, 0.02%)</title><rect x="33.6724%" y="165" width="0.0151%" height="15" fill="rgb(210,199,37)" fg:x="84570" fg:w="38"/><text x="33.9224%" y="175.50"></text></g><g><title>__gmpn_redc_2_fat (36 samples, 0.01%)</title><rect x="33.6732%" y="149" width="0.0143%" height="15" fill="rgb(244,192,49)" fg:x="84572" fg:w="36"/><text x="33.9232%" y="159.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (72 samples, 0.03%)</title><rect x="33.6724%" y="405" width="0.0287%" height="15" fill="rgb(226,211,11)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="415.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (72 samples, 0.03%)</title><rect x="33.6724%" y="389" width="0.0287%" height="15" fill="rgb(236,162,54)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="399.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (72 samples, 0.03%)</title><rect x="33.6724%" y="373" width="0.0287%" height="15" fill="rgb(220,229,9)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="383.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (72 samples, 0.03%)</title><rect x="33.6724%" y="357" width="0.0287%" height="15" fill="rgb(250,87,22)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="367.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (72 samples, 0.03%)</title><rect x="33.6724%" y="341" width="0.0287%" height="15" fill="rgb(239,43,17)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="351.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (72 samples, 0.03%)</title><rect x="33.6724%" y="325" width="0.0287%" height="15" fill="rgb(231,177,25)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (72 samples, 0.03%)</title><rect x="33.6724%" y="309" width="0.0287%" height="15" fill="rgb(219,179,1)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (72 samples, 0.03%)</title><rect x="33.6724%" y="293" width="0.0287%" height="15" fill="rgb(238,219,53)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (72 samples, 0.03%)</title><rect x="33.6724%" y="277" width="0.0287%" height="15" fill="rgb(232,167,36)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (72 samples, 0.03%)</title><rect x="33.6724%" y="261" width="0.0287%" height="15" fill="rgb(244,19,51)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="271.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (72 samples, 0.03%)</title><rect x="33.6724%" y="245" width="0.0287%" height="15" fill="rgb(224,6,22)" fg:x="84570" fg:w="72"/><text x="33.9224%" y="255.50"></text></g><g><title>sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt;::update (34 samples, 0.01%)</title><rect x="33.6876%" y="229" width="0.0135%" height="15" fill="rgb(224,145,5)" fg:x="84608" fg:w="34"/><text x="33.9376%" y="239.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (34 samples, 0.01%)</title><rect x="33.6876%" y="213" width="0.0135%" height="15" fill="rgb(234,130,49)" fg:x="84608" fg:w="34"/><text x="33.9376%" y="223.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (34 samples, 0.01%)</title><rect x="33.6876%" y="197" width="0.0135%" height="15" fill="rgb(254,6,2)" fg:x="84608" fg:w="34"/><text x="33.9376%" y="207.50"></text></g><g><title>__gmpn_powm (28 samples, 0.01%)</title><rect x="33.7011%" y="101" width="0.0111%" height="15" fill="rgb(208,96,46)" fg:x="84642" fg:w="28"/><text x="33.9511%" y="111.50"></text></g><g><title>__gmpn_redc_2_fat (26 samples, 0.01%)</title><rect x="33.7019%" y="85" width="0.0104%" height="15" fill="rgb(239,3,39)" fg:x="84644" fg:w="26"/><text x="33.9519%" y="95.50"></text></g><g><title>sssim::accumulator::rsa::MembershipWitness&lt;G&gt;::update (30 samples, 0.01%)</title><rect x="33.7011%" y="165" width="0.0119%" height="15" fill="rgb(233,210,1)" fg:x="84642" fg:w="30"/><text x="33.9511%" y="175.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (30 samples, 0.01%)</title><rect x="33.7011%" y="149" width="0.0119%" height="15" fill="rgb(244,137,37)" fg:x="84642" fg:w="30"/><text x="33.9511%" y="159.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (30 samples, 0.01%)</title><rect x="33.7011%" y="133" width="0.0119%" height="15" fill="rgb(240,136,2)" fg:x="84642" fg:w="30"/><text x="33.9511%" y="143.50"></text></g><g><title>__gmpz_powm (30 samples, 0.01%)</title><rect x="33.7011%" y="117" width="0.0119%" height="15" fill="rgb(239,18,37)" fg:x="84642" fg:w="30"/><text x="33.9511%" y="127.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (117 samples, 0.05%)</title><rect x="33.6724%" y="517" width="0.0466%" height="15" fill="rgb(218,185,22)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="527.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (117 samples, 0.05%)</title><rect x="33.6724%" y="501" width="0.0466%" height="15" fill="rgb(225,218,4)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="511.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (117 samples, 0.05%)</title><rect x="33.6724%" y="485" width="0.0466%" height="15" fill="rgb(230,182,32)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="495.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (117 samples, 0.05%)</title><rect x="33.6724%" y="469" width="0.0466%" height="15" fill="rgb(242,56,43)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="479.50"></text></g><g><title>rayon_core::join::join_context (117 samples, 0.05%)</title><rect x="33.6724%" y="453" width="0.0466%" height="15" fill="rgb(233,99,24)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="463.50"></text></g><g><title>rayon_core::registry::in_worker (117 samples, 0.05%)</title><rect x="33.6724%" y="437" width="0.0466%" height="15" fill="rgb(234,209,42)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="447.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (117 samples, 0.05%)</title><rect x="33.6724%" y="421" width="0.0466%" height="15" fill="rgb(227,7,12)" fg:x="84570" fg:w="117"/><text x="33.9224%" y="431.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (45 samples, 0.02%)</title><rect x="33.7011%" y="405" width="0.0179%" height="15" fill="rgb(245,203,43)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="415.50"></text></g><g><title>std::panic::catch_unwind (45 samples, 0.02%)</title><rect x="33.7011%" y="389" width="0.0179%" height="15" fill="rgb(238,205,33)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="399.50"></text></g><g><title>std::panicking::try (45 samples, 0.02%)</title><rect x="33.7011%" y="373" width="0.0179%" height="15" fill="rgb(231,56,7)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="383.50"></text></g><g><title>std::panicking::try::do_call (45 samples, 0.02%)</title><rect x="33.7011%" y="357" width="0.0179%" height="15" fill="rgb(244,186,29)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="367.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (45 samples, 0.02%)</title><rect x="33.7011%" y="341" width="0.0179%" height="15" fill="rgb(234,111,31)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="351.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (45 samples, 0.02%)</title><rect x="33.7011%" y="325" width="0.0179%" height="15" fill="rgb(241,149,10)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (45 samples, 0.02%)</title><rect x="33.7011%" y="309" width="0.0179%" height="15" fill="rgb(249,206,44)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (45 samples, 0.02%)</title><rect x="33.7011%" y="293" width="0.0179%" height="15" fill="rgb(251,153,30)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="303.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (45 samples, 0.02%)</title><rect x="33.7011%" y="277" width="0.0179%" height="15" fill="rgb(239,152,38)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="287.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (45 samples, 0.02%)</title><rect x="33.7011%" y="261" width="0.0179%" height="15" fill="rgb(249,139,47)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (45 samples, 0.02%)</title><rect x="33.7011%" y="245" width="0.0179%" height="15" fill="rgb(244,64,35)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (45 samples, 0.02%)</title><rect x="33.7011%" y="229" width="0.0179%" height="15" fill="rgb(216,46,15)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (45 samples, 0.02%)</title><rect x="33.7011%" y="213" width="0.0179%" height="15" fill="rgb(250,74,19)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (45 samples, 0.02%)</title><rect x="33.7011%" y="197" width="0.0179%" height="15" fill="rgb(249,42,33)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="207.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (45 samples, 0.02%)</title><rect x="33.7011%" y="181" width="0.0179%" height="15" fill="rgb(242,149,17)" fg:x="84642" fg:w="45"/><text x="33.9511%" y="191.50"></text></g><g><title>rayon_core::job::StackJob&lt;L,F,R&gt;::run_inline (43 samples, 0.02%)</title><rect x="33.7190%" y="341" width="0.0171%" height="15" fill="rgb(244,29,21)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="351.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (43 samples, 0.02%)</title><rect x="33.7190%" y="325" width="0.0171%" height="15" fill="rgb(220,130,37)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="335.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (43 samples, 0.02%)</title><rect x="33.7190%" y="309" width="0.0171%" height="15" fill="rgb(211,67,2)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="319.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (43 samples, 0.02%)</title><rect x="33.7190%" y="293" width="0.0171%" height="15" fill="rgb(235,68,52)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="303.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (43 samples, 0.02%)</title><rect x="33.7190%" y="277" width="0.0171%" height="15" fill="rgb(246,142,3)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="287.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (43 samples, 0.02%)</title><rect x="33.7190%" y="261" width="0.0171%" height="15" fill="rgb(241,25,7)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.02%)</title><rect x="33.7190%" y="245" width="0.0171%" height="15" fill="rgb(242,119,39)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 0.02%)</title><rect x="33.7190%" y="229" width="0.0171%" height="15" fill="rgb(241,98,45)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.02%)</title><rect x="33.7190%" y="213" width="0.0171%" height="15" fill="rgb(254,28,30)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (43 samples, 0.02%)</title><rect x="33.7190%" y="197" width="0.0171%" height="15" fill="rgb(241,142,54)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="207.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (43 samples, 0.02%)</title><rect x="33.7190%" y="181" width="0.0171%" height="15" fill="rgb(222,85,15)" fg:x="84687" fg:w="43"/><text x="33.9690%" y="191.50"></text></g><g><title>__gmpn_powm (26 samples, 0.01%)</title><rect x="33.7361%" y="37" width="0.0104%" height="15" fill="rgb(210,85,47)" fg:x="84730" fg:w="26"/><text x="33.9861%" y="47.50"></text></g><g><title>sssim::accumulator::rsa::MembershipWitness&lt;G&gt;::update (28 samples, 0.01%)</title><rect x="33.7361%" y="101" width="0.0111%" height="15" fill="rgb(224,206,25)" fg:x="84730" fg:w="28"/><text x="33.9861%" y="111.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (28 samples, 0.01%)</title><rect x="33.7361%" y="85" width="0.0111%" height="15" fill="rgb(243,201,19)" fg:x="84730" fg:w="28"/><text x="33.9861%" y="95.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (28 samples, 0.01%)</title><rect x="33.7361%" y="69" width="0.0111%" height="15" fill="rgb(236,59,4)" fg:x="84730" fg:w="28"/><text x="33.9861%" y="79.50"></text></g><g><title>__gmpz_powm (28 samples, 0.01%)</title><rect x="33.7361%" y="53" width="0.0111%" height="15" fill="rgb(254,179,45)" fg:x="84730" fg:w="28"/><text x="33.9861%" y="63.50"></text></g><g><title>std::panic::catch_unwind (410 samples, 0.16%)</title><rect x="33.5936%" y="1061" width="0.1632%" height="15" fill="rgb(226,14,10)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="1071.50"></text></g><g><title>std::panicking::try (410 samples, 0.16%)</title><rect x="33.5936%" y="1045" width="0.1632%" height="15" fill="rgb(244,27,41)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (410 samples, 0.16%)</title><rect x="33.5936%" y="1029" width="0.1632%" height="15" fill="rgb(235,35,32)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="1039.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (410 samples, 0.16%)</title><rect x="33.5936%" y="1013" width="0.1632%" height="15" fill="rgb(218,68,31)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (410 samples, 0.16%)</title><rect x="33.5936%" y="997" width="0.1632%" height="15" fill="rgb(207,120,37)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="1007.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (410 samples, 0.16%)</title><rect x="33.5936%" y="981" width="0.1632%" height="15" fill="rgb(227,98,0)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="991.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (410 samples, 0.16%)</title><rect x="33.5936%" y="965" width="0.1632%" height="15" fill="rgb(207,7,3)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="975.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (410 samples, 0.16%)</title><rect x="33.5936%" y="949" width="0.1632%" height="15" fill="rgb(206,98,19)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="959.50"></text></g><g><title>rayon_core::registry::main_loop (410 samples, 0.16%)</title><rect x="33.5936%" y="933" width="0.1632%" height="15" fill="rgb(217,5,26)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="943.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (410 samples, 0.16%)</title><rect x="33.5936%" y="917" width="0.1632%" height="15" fill="rgb(235,190,38)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="927.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (410 samples, 0.16%)</title><rect x="33.5936%" y="901" width="0.1632%" height="15" fill="rgb(247,86,24)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="911.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (410 samples, 0.16%)</title><rect x="33.5936%" y="885" width="0.1632%" height="15" fill="rgb(205,101,16)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="895.50"></text></g><g><title>rayon_core::job::JobRef::execute (410 samples, 0.16%)</title><rect x="33.5936%" y="869" width="0.1632%" height="15" fill="rgb(246,168,33)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="879.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (410 samples, 0.16%)</title><rect x="33.5936%" y="853" width="0.1632%" height="15" fill="rgb(231,114,1)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="863.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call (410 samples, 0.16%)</title><rect x="33.5936%" y="837" width="0.1632%" height="15" fill="rgb(207,184,53)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="847.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (410 samples, 0.16%)</title><rect x="33.5936%" y="821" width="0.1632%" height="15" fill="rgb(224,95,51)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="831.50"></text></g><g><title>std::panic::catch_unwind (410 samples, 0.16%)</title><rect x="33.5936%" y="805" width="0.1632%" height="15" fill="rgb(212,188,45)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="815.50"></text></g><g><title>std::panicking::try (410 samples, 0.16%)</title><rect x="33.5936%" y="789" width="0.1632%" height="15" fill="rgb(223,154,38)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="799.50"></text></g><g><title>std::panicking::try::do_call (410 samples, 0.16%)</title><rect x="33.5936%" y="773" width="0.1632%" height="15" fill="rgb(251,22,52)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (410 samples, 0.16%)</title><rect x="33.5936%" y="757" width="0.1632%" height="15" fill="rgb(229,209,22)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="767.50"></text></g><g><title>rayon_core::job::JobResult&lt;T&gt;::call::{{closure}} (410 samples, 0.16%)</title><rect x="33.5936%" y="741" width="0.1632%" height="15" fill="rgb(234,138,34)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="751.50"></text></g><g><title>rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}} (410 samples, 0.16%)</title><rect x="33.5936%" y="725" width="0.1632%" height="15" fill="rgb(212,95,11)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="735.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (410 samples, 0.16%)</title><rect x="33.5936%" y="709" width="0.1632%" height="15" fill="rgb(240,179,47)" fg:x="84372" fg:w="410"/><text x="33.8436%" y="719.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (212 samples, 0.08%)</title><rect x="33.6724%" y="693" width="0.0844%" height="15" fill="rgb(240,163,11)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="703.50"></text></g><g><title>std::panic::catch_unwind (212 samples, 0.08%)</title><rect x="33.6724%" y="677" width="0.0844%" height="15" fill="rgb(236,37,12)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="687.50"></text></g><g><title>std::panicking::try (212 samples, 0.08%)</title><rect x="33.6724%" y="661" width="0.0844%" height="15" fill="rgb(232,164,16)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="671.50"></text></g><g><title>std::panicking::try::do_call (212 samples, 0.08%)</title><rect x="33.6724%" y="645" width="0.0844%" height="15" fill="rgb(244,205,15)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (212 samples, 0.08%)</title><rect x="33.6724%" y="629" width="0.0844%" height="15" fill="rgb(223,117,47)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="639.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (212 samples, 0.08%)</title><rect x="33.6724%" y="613" width="0.0844%" height="15" fill="rgb(244,107,35)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="623.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (212 samples, 0.08%)</title><rect x="33.6724%" y="597" width="0.0844%" height="15" fill="rgb(205,140,8)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="607.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (212 samples, 0.08%)</title><rect x="33.6724%" y="581" width="0.0844%" height="15" fill="rgb(228,84,46)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="591.50"></text></g><g><title>rayon_core::join::join_context (212 samples, 0.08%)</title><rect x="33.6724%" y="565" width="0.0844%" height="15" fill="rgb(254,188,9)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="575.50"></text></g><g><title>rayon_core::registry::in_worker (212 samples, 0.08%)</title><rect x="33.6724%" y="549" width="0.0844%" height="15" fill="rgb(206,112,54)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="559.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (212 samples, 0.08%)</title><rect x="33.6724%" y="533" width="0.0844%" height="15" fill="rgb(216,84,49)" fg:x="84570" fg:w="212"/><text x="33.9224%" y="543.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (95 samples, 0.04%)</title><rect x="33.7190%" y="517" width="0.0378%" height="15" fill="rgb(214,194,35)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="527.50"></text></g><g><title>std::panic::catch_unwind (95 samples, 0.04%)</title><rect x="33.7190%" y="501" width="0.0378%" height="15" fill="rgb(249,28,3)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="511.50"></text></g><g><title>std::panicking::try (95 samples, 0.04%)</title><rect x="33.7190%" y="485" width="0.0378%" height="15" fill="rgb(222,56,52)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="495.50"></text></g><g><title>std::panicking::try::do_call (95 samples, 0.04%)</title><rect x="33.7190%" y="469" width="0.0378%" height="15" fill="rgb(245,217,50)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="479.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (95 samples, 0.04%)</title><rect x="33.7190%" y="453" width="0.0378%" height="15" fill="rgb(213,201,24)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="463.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (95 samples, 0.04%)</title><rect x="33.7190%" y="437" width="0.0378%" height="15" fill="rgb(248,116,28)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="447.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (95 samples, 0.04%)</title><rect x="33.7190%" y="421" width="0.0378%" height="15" fill="rgb(219,72,43)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="431.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (95 samples, 0.04%)</title><rect x="33.7190%" y="405" width="0.0378%" height="15" fill="rgb(209,138,14)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="415.50"></text></g><g><title>rayon_core::join::join_context (95 samples, 0.04%)</title><rect x="33.7190%" y="389" width="0.0378%" height="15" fill="rgb(222,18,33)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="399.50"></text></g><g><title>rayon_core::registry::in_worker (95 samples, 0.04%)</title><rect x="33.7190%" y="373" width="0.0378%" height="15" fill="rgb(213,199,7)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="383.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (95 samples, 0.04%)</title><rect x="33.7190%" y="357" width="0.0378%" height="15" fill="rgb(250,110,10)" fg:x="84687" fg:w="95"/><text x="33.9690%" y="367.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (52 samples, 0.02%)</title><rect x="33.7361%" y="341" width="0.0207%" height="15" fill="rgb(248,123,6)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="351.50"></text></g><g><title>std::panic::catch_unwind (52 samples, 0.02%)</title><rect x="33.7361%" y="325" width="0.0207%" height="15" fill="rgb(206,91,31)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="335.50"></text></g><g><title>std::panicking::try (52 samples, 0.02%)</title><rect x="33.7361%" y="309" width="0.0207%" height="15" fill="rgb(211,154,13)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="319.50"></text></g><g><title>std::panicking::try::do_call (52 samples, 0.02%)</title><rect x="33.7361%" y="293" width="0.0207%" height="15" fill="rgb(225,148,7)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="303.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (52 samples, 0.02%)</title><rect x="33.7361%" y="277" width="0.0207%" height="15" fill="rgb(220,160,43)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="287.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (52 samples, 0.02%)</title><rect x="33.7361%" y="261" width="0.0207%" height="15" fill="rgb(213,52,39)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="271.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}} (52 samples, 0.02%)</title><rect x="33.7361%" y="245" width="0.0207%" height="15" fill="rgb(243,137,7)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="255.50"></text></g><g><title>rayon::iter::plumbing::bridge_producer_consumer::helper (52 samples, 0.02%)</title><rect x="33.7361%" y="229" width="0.0207%" height="15" fill="rgb(230,79,13)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="239.50"></text></g><g><title>rayon::iter::plumbing::Producer::fold_with (52 samples, 0.02%)</title><rect x="33.7361%" y="213" width="0.0207%" height="15" fill="rgb(247,105,23)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="223.50"></text></g><g><title>&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (52 samples, 0.02%)</title><rect x="33.7361%" y="197" width="0.0207%" height="15" fill="rgb(223,179,41)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (52 samples, 0.02%)</title><rect x="33.7361%" y="181" width="0.0207%" height="15" fill="rgb(218,9,34)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (52 samples, 0.02%)</title><rect x="33.7361%" y="165" width="0.0207%" height="15" fill="rgb(222,106,8)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (52 samples, 0.02%)</title><rect x="33.7361%" y="149" width="0.0207%" height="15" fill="rgb(211,220,0)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (52 samples, 0.02%)</title><rect x="33.7361%" y="133" width="0.0207%" height="15" fill="rgb(229,52,16)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="143.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch::{{closure}} (52 samples, 0.02%)</title><rect x="33.7361%" y="117" width="0.0207%" height="15" fill="rgb(212,155,18)" fg:x="84730" fg:w="52"/><text x="33.9861%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (411 samples, 0.16%)</title><rect x="33.5936%" y="1125" width="0.1636%" height="15" fill="rgb(242,21,14)" fg:x="84372" fg:w="411"/><text x="33.8436%" y="1135.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (411 samples, 0.16%)</title><rect x="33.5936%" y="1109" width="0.1636%" height="15" fill="rgb(222,19,48)" fg:x="84372" fg:w="411"/><text x="33.8436%" y="1119.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (411 samples, 0.16%)</title><rect x="33.5936%" y="1093" width="0.1636%" height="15" fill="rgb(232,45,27)" fg:x="84372" fg:w="411"/><text x="33.8436%" y="1103.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (411 samples, 0.16%)</title><rect x="33.5936%" y="1077" width="0.1636%" height="15" fill="rgb(249,103,42)" fg:x="84372" fg:w="411"/><text x="33.8436%" y="1087.50"></text></g><g><title>__clone3 (415 samples, 0.17%)</title><rect x="33.5928%" y="1173" width="0.1652%" height="15" fill="rgb(246,81,33)" fg:x="84370" fg:w="415"/><text x="33.8428%" y="1183.50"></text></g><g><title>start_thread (414 samples, 0.16%)</title><rect x="33.5932%" y="1157" width="0.1648%" height="15" fill="rgb(252,33,42)" fg:x="84371" fg:w="414"/><text x="33.8432%" y="1167.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (413 samples, 0.16%)</title><rect x="33.5936%" y="1141" width="0.1644%" height="15" fill="rgb(209,212,41)" fg:x="84372" fg:w="413"/><text x="33.8436%" y="1151.50"></text></g><g><title>__gmpn_add_n (69 samples, 0.03%)</title><rect x="33.7580%" y="1173" width="0.0275%" height="15" fill="rgb(207,154,6)" fg:x="84785" fg:w="69"/><text x="34.0080%" y="1183.50"></text></g><g><title>__gmpn_add_n_x86_64 (7,270 samples, 2.89%)</title><rect x="33.7855%" y="1173" width="2.8946%" height="15" fill="rgb(223,64,47)" fg:x="84854" fg:w="7270"/><text x="34.0355%" y="1183.50">__..</text></g><g><title>__gmpn_addmul_1_zen (79,013 samples, 31.46%)</title><rect x="36.6801%" y="1173" width="31.4599%" height="15" fill="rgb(211,161,38)" fg:x="92124" fg:w="79013"/><text x="36.9301%" y="1183.50">__gmpn_addmul_1_zen</text></g><g><title>[unknown] (31 samples, 0.01%)</title><rect x="68.1277%" y="1157" width="0.0123%" height="15" fill="rgb(219,138,40)" fg:x="171106" fg:w="31"/><text x="68.3777%" y="1167.50"></text></g><g><title>__gmpn_mul_basecase_zen (3,326 samples, 1.32%)</title><rect x="68.1428%" y="1173" width="1.3243%" height="15" fill="rgb(241,228,46)" fg:x="171144" fg:w="3326"/><text x="68.3928%" y="1183.50"></text></g><g><title>__gmpn_redc_2_fat (29 samples, 0.01%)</title><rect x="69.4722%" y="1157" width="0.0115%" height="15" fill="rgb(223,209,38)" fg:x="174483" fg:w="29"/><text x="69.7222%" y="1167.50"></text></g><g><title>__gmpn_powm (34 samples, 0.01%)</title><rect x="69.4710%" y="1173" width="0.0135%" height="15" fill="rgb(236,164,45)" fg:x="174480" fg:w="34"/><text x="69.7210%" y="1183.50"></text></g><g><title>__gmpn_sqr (53 samples, 0.02%)</title><rect x="69.4846%" y="1173" width="0.0211%" height="15" fill="rgb(231,15,5)" fg:x="174514" fg:w="53"/><text x="69.7346%" y="1183.50"></text></g><g><title>__gmpn_toom2_sqr.localalias (53 samples, 0.02%)</title><rect x="69.4846%" y="1157" width="0.0211%" height="15" fill="rgb(252,35,15)" fg:x="174514" fg:w="53"/><text x="69.7346%" y="1167.50"></text></g><g><title>__gmpn_sqr_basecase_zen (57,941 samples, 23.07%)</title><rect x="69.5057%" y="1173" width="23.0698%" height="15" fill="rgb(248,181,18)" fg:x="174567" fg:w="57941"/><text x="69.7557%" y="1183.50">__gmpn_sqr_basecase_zen</text></g><g><title>[unknown] (28 samples, 0.01%)</title><rect x="92.5644%" y="1157" width="0.0111%" height="15" fill="rgb(233,39,42)" fg:x="232480" fg:w="28"/><text x="92.8144%" y="1167.50"></text></g><g><title>__gmpn_sub_n_x86_64 (4,158 samples, 1.66%)</title><rect x="92.5759%" y="1173" width="1.6556%" height="15" fill="rgb(238,110,33)" fg:x="232509" fg:w="4158"/><text x="92.8259%" y="1183.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (50 samples, 0.02%)</title><rect x="94.2458%" y="805" width="0.0199%" height="15" fill="rgb(233,195,10)" fg:x="236703" fg:w="50"/><text x="94.4958%" y="815.50"></text></g><g><title>rusqlite::Connection::execute::{{closure}} (50 samples, 0.02%)</title><rect x="94.2458%" y="789" width="0.0199%" height="15" fill="rgb(254,105,3)" fg:x="236703" fg:w="50"/><text x="94.4958%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (49 samples, 0.02%)</title><rect x="94.2462%" y="773" width="0.0195%" height="15" fill="rgb(221,225,9)" fg:x="236704" fg:w="49"/><text x="94.4962%" y="783.50"></text></g><g><title>rusqlite::Connection::execute::{{closure}}::{{closure}} (49 samples, 0.02%)</title><rect x="94.2462%" y="757" width="0.0195%" height="15" fill="rgb(224,227,45)" fg:x="236704" fg:w="49"/><text x="94.4962%" y="767.50"></text></g><g><title>rusqlite::statement::Statement::execute (49 samples, 0.02%)</title><rect x="94.2462%" y="741" width="0.0195%" height="15" fill="rgb(229,198,43)" fg:x="236704" fg:w="49"/><text x="94.4962%" y="751.50"></text></g><g><title>rusqlite::statement::Statement::execute_with_bound_parameters (48 samples, 0.02%)</title><rect x="94.2466%" y="725" width="0.0191%" height="15" fill="rgb(206,209,35)" fg:x="236705" fg:w="48"/><text x="94.4966%" y="735.50"></text></g><g><title>rusqlite::raw_statement::RawStatement::step (47 samples, 0.02%)</title><rect x="94.2470%" y="709" width="0.0187%" height="15" fill="rgb(245,195,53)" fg:x="236706" fg:w="47"/><text x="94.4970%" y="719.50"></text></g><g><title>sqlite3_step (47 samples, 0.02%)</title><rect x="94.2470%" y="693" width="0.0187%" height="15" fill="rgb(240,92,26)" fg:x="236706" fg:w="47"/><text x="94.4970%" y="703.50"></text></g><g><title>sqlite3_step (47 samples, 0.02%)</title><rect x="94.2470%" y="677" width="0.0187%" height="15" fill="rgb(207,40,23)" fg:x="236706" fg:w="47"/><text x="94.4970%" y="687.50"></text></g><g><title>sqlite3Step (47 samples, 0.02%)</title><rect x="94.2470%" y="661" width="0.0187%" height="15" fill="rgb(223,111,35)" fg:x="236706" fg:w="47"/><text x="94.4970%" y="671.50"></text></g><g><title>sqlite3VdbeExec (46 samples, 0.02%)</title><rect x="94.2474%" y="645" width="0.0183%" height="15" fill="rgb(229,147,28)" fg:x="236707" fg:w="46"/><text x="94.4974%" y="655.50"></text></g><g><title>rusqlite::Connection::execute (52 samples, 0.02%)</title><rect x="94.2458%" y="821" width="0.0207%" height="15" fill="rgb(211,29,28)" fg:x="236703" fg:w="52"/><text x="94.4958%" y="831.50"></text></g><g><title>&lt;sssim::UpdateResult as sssim::Table&gt;::insert (53 samples, 0.02%)</title><rect x="94.2458%" y="837" width="0.0211%" height="15" fill="rgb(228,72,33)" fg:x="236703" fg:w="53"/><text x="94.4958%" y="847.50"></text></g><g><title>&lt;rug::integer::big::Integer as sssim::util::DataSized&gt;::size (51 samples, 0.02%)</title><rect x="94.2673%" y="789" width="0.0203%" height="15" fill="rgb(205,214,31)" fg:x="236757" fg:w="51"/><text x="94.5173%" y="799.50"></text></g><g><title>uom::si::information::&lt;impl uom::si::Quantity&lt;dyn uom::si::Dimension+I = typenum::int::Z0+J = typenum::int::Z0+L = typenum::int::Z0+M = typenum::int::Z0+T = typenum::int::Z0+N = typenum::int::Z0+Kind = dyn uom::si::marker::InformationKind+Th = typenum::int::Z0,U,V&gt;&gt;::new (43 samples, 0.02%)</title><rect x="94.2705%" y="773" width="0.0171%" height="15" fill="rgb(224,111,15)" fg:x="236765" fg:w="43"/><text x="94.5205%" y="783.50"></text></g><g><title>uom::si::to_base (43 samples, 0.02%)</title><rect x="94.2705%" y="757" width="0.0171%" height="15" fill="rgb(253,21,26)" fg:x="236765" fg:w="43"/><text x="94.5205%" y="767.50"></text></g><g><title>&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Mul&gt;::mul (27 samples, 0.01%)</title><rect x="94.2987%" y="725" width="0.0108%" height="15" fill="rgb(245,139,43)" fg:x="236836" fg:w="27"/><text x="94.5487%" y="735.50"></text></g><g><title>&lt;rug::integer::big::Integer as sssim::util::DataSized&gt;::size (95 samples, 0.04%)</title><rect x="94.2876%" y="773" width="0.0378%" height="15" fill="rgb(252,170,7)" fg:x="236808" fg:w="95"/><text x="94.5376%" y="783.50"></text></g><g><title>uom::si::information::&lt;impl uom::si::Quantity&lt;dyn uom::si::Dimension+I = typenum::int::Z0+J = typenum::int::Z0+L = typenum::int::Z0+M = typenum::int::Z0+T = typenum::int::Z0+N = typenum::int::Z0+Kind = dyn uom::si::marker::InformationKind+Th = typenum::int::Z0,U,V&gt;&gt;::new (74 samples, 0.03%)</title><rect x="94.2960%" y="757" width="0.0295%" height="15" fill="rgb(231,118,14)" fg:x="236829" fg:w="74"/><text x="94.5460%" y="767.50"></text></g><g><title>uom::si::to_base (73 samples, 0.03%)</title><rect x="94.2964%" y="741" width="0.0291%" height="15" fill="rgb(238,83,0)" fg:x="236830" fg:w="73"/><text x="94.5464%" y="751.50"></text></g><g><title>&lt;sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt; as sssim::util::DataSized&gt;::size (158 samples, 0.06%)</title><rect x="94.2876%" y="789" width="0.0629%" height="15" fill="rgb(221,39,39)" fg:x="236808" fg:w="158"/><text x="94.5376%" y="799.50"></text></g><g><title>&lt;uom::si::Quantity&lt;D,Ul,V&gt; as core::ops::arith::Add&lt;uom::si::Quantity&lt;D,Ur,V&gt;&gt;&gt;::add (63 samples, 0.03%)</title><rect x="94.3254%" y="773" width="0.0251%" height="15" fill="rgb(222,119,46)" fg:x="236903" fg:w="63"/><text x="94.5754%" y="783.50"></text></g><g><title>uom::si::change_base (63 samples, 0.03%)</title><rect x="94.3254%" y="757" width="0.0251%" height="15" fill="rgb(222,165,49)" fg:x="236903" fg:w="63"/><text x="94.5754%" y="767.50"></text></g><g><title>&lt;num_rational::Ratio&lt;T&gt; as core::ops::arith::Div&gt;::div (62 samples, 0.02%)</title><rect x="94.3589%" y="757" width="0.0247%" height="15" fill="rgb(219,113,52)" fg:x="236987" fg:w="62"/><text x="94.6089%" y="767.50"></text></g><g><title>num_rational::Ratio&lt;T&gt;::new (37 samples, 0.01%)</title><rect x="94.3688%" y="741" width="0.0147%" height="15" fill="rgb(214,7,15)" fg:x="237012" fg:w="37"/><text x="94.6188%" y="751.50"></text></g><g><title>num_rational::Ratio&lt;T&gt;::reduce (37 samples, 0.01%)</title><rect x="94.3688%" y="725" width="0.0147%" height="15" fill="rgb(235,32,4)" fg:x="237012" fg:w="37"/><text x="94.6188%" y="735.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::Authenticator&gt;::cdn_size (409 samples, 0.16%)</title><rect x="94.2669%" y="837" width="0.1628%" height="15" fill="rgb(238,90,54)" fg:x="236756" fg:w="409"/><text x="94.5169%" y="847.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::Authenticator&gt;::cdn_size (408 samples, 0.16%)</title><rect x="94.2673%" y="821" width="0.1624%" height="15" fill="rgb(213,208,19)" fg:x="236757" fg:w="408"/><text x="94.5173%" y="831.50"></text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::Accumulator&gt;::cdn_size (408 samples, 0.16%)</title><rect x="94.2673%" y="805" width="0.1624%" height="15" fill="rgb(233,156,4)" fg:x="236757" fg:w="408"/><text x="94.5173%" y="815.50"></text></g><g><title>&lt;uom::si::Quantity&lt;D,Ul,V&gt; as core::ops::arith::AddAssign&lt;uom::si::Quantity&lt;D,Ur,V&gt;&gt;&gt;::add_assign (178 samples, 0.07%)</title><rect x="94.3589%" y="789" width="0.0709%" height="15" fill="rgb(207,194,5)" fg:x="236987" fg:w="178"/><text x="94.6089%" y="799.50"></text></g><g><title>uom::si::change_base (178 samples, 0.07%)</title><rect x="94.3589%" y="773" width="0.0709%" height="15" fill="rgb(206,111,30)" fg:x="236987" fg:w="178"/><text x="94.6089%" y="783.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::util::DataSized&gt;::size (38 samples, 0.02%)</title><rect x="94.4297%" y="837" width="0.0151%" height="15" fill="rgb(243,70,54)" fg:x="237165" fg:w="38"/><text x="94.6797%" y="847.50"></text></g><g><title>__gmpz_lucas_mod (37 samples, 0.01%)</title><rect x="94.4676%" y="661" width="0.0147%" height="15" fill="rgb(242,28,8)" fg:x="237260" fg:w="37"/><text x="94.7176%" y="671.50"></text></g><g><title>__gmpz_stronglucas (57 samples, 0.02%)</title><rect x="94.4600%" y="677" width="0.0227%" height="15" fill="rgb(219,106,18)" fg:x="237241" fg:w="57"/><text x="94.7100%" y="687.50"></text></g><g><title>__gmpn_redc_1_fat (35 samples, 0.01%)</title><rect x="94.5058%" y="629" width="0.0139%" height="15" fill="rgb(244,222,10)" fg:x="237356" fg:w="35"/><text x="94.7558%" y="639.50"></text></g><g><title>__gmpn_powm (68 samples, 0.03%)</title><rect x="94.4930%" y="645" width="0.0271%" height="15" fill="rgb(236,179,52)" fg:x="237324" fg:w="68"/><text x="94.7430%" y="655.50"></text></g><g><title>__gmpz_powm (111 samples, 0.04%)</title><rect x="94.4835%" y="661" width="0.0442%" height="15" fill="rgb(213,23,39)" fg:x="237300" fg:w="111"/><text x="94.7335%" y="671.50"></text></g><g><title>&lt;sssim::primitives::prime::Prime as core::convert::TryFrom&lt;rug::integer::big::Integer&gt;&gt;::try_from (196 samples, 0.08%)</title><rect x="94.4500%" y="757" width="0.0780%" height="15" fill="rgb(238,48,10)" fg:x="237216" fg:w="196"/><text x="94.7000%" y="767.50"></text></g><g><title>rug::integer::big::Integer::is_probably_prime (196 samples, 0.08%)</title><rect x="94.4500%" y="741" width="0.0780%" height="15" fill="rgb(251,196,23)" fg:x="237216" fg:w="196"/><text x="94.7000%" y="751.50"></text></g><g><title>rug::ext::xmpz::probab_prime_p (196 samples, 0.08%)</title><rect x="94.4500%" y="725" width="0.0780%" height="15" fill="rgb(250,152,24)" fg:x="237216" fg:w="196"/><text x="94.7000%" y="735.50"></text></g><g><title>__gmpz_probab_prime_p (196 samples, 0.08%)</title><rect x="94.4500%" y="709" width="0.0780%" height="15" fill="rgb(209,150,17)" fg:x="237216" fg:w="196"/><text x="94.7000%" y="719.50"></text></g><g><title>__gmpz_millerrabin (173 samples, 0.07%)</title><rect x="94.4592%" y="693" width="0.0689%" height="15" fill="rgb(234,202,34)" fg:x="237239" fg:w="173"/><text x="94.7092%" y="703.50"></text></g><g><title>millerrabin (112 samples, 0.04%)</title><rect x="94.4835%" y="677" width="0.0446%" height="15" fill="rgb(253,148,53)" fg:x="237300" fg:w="112"/><text x="94.7335%" y="687.50"></text></g><g><title>&lt;digest::core_api::xof_reader::XofReaderCoreWrapper&lt;T&gt; as digest::XofReader&gt;::read::{{closure}} (79 samples, 0.03%)</title><rect x="94.5281%" y="709" width="0.0315%" height="15" fill="rgb(218,129,16)" fg:x="237412" fg:w="79"/><text x="94.7781%" y="719.50"></text></g><g><title>&lt;sha3::Shake256ReaderCore as digest::core_api::XofReaderCore&gt;::read_block (78 samples, 0.03%)</title><rect x="94.5285%" y="693" width="0.0311%" height="15" fill="rgb(216,85,19)" fg:x="237413" fg:w="78"/><text x="94.7785%" y="703.50"></text></g><g><title>sha3::state::Sha3State::permute (78 samples, 0.03%)</title><rect x="94.5285%" y="677" width="0.0311%" height="15" fill="rgb(235,228,7)" fg:x="237413" fg:w="78"/><text x="94.7785%" y="687.50"></text></g><g><title>keccak::keccak_p (78 samples, 0.03%)</title><rect x="94.5285%" y="661" width="0.0311%" height="15" fill="rgb(245,175,0)" fg:x="237413" fg:w="78"/><text x="94.7785%" y="671.50"></text></g><g><title>&lt;digest::core_api::xof_reader::XofReaderCoreWrapper&lt;T&gt; as digest::XofReader&gt;::read (82 samples, 0.03%)</title><rect x="94.5281%" y="741" width="0.0326%" height="15" fill="rgb(208,168,36)" fg:x="237412" fg:w="82"/><text x="94.7781%" y="751.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::set_data (82 samples, 0.03%)</title><rect x="94.5281%" y="725" width="0.0326%" height="15" fill="rgb(246,171,24)" fg:x="237412" fg:w="82"/><text x="94.7781%" y="735.50"></text></g><g><title>sssim::hash_to_prime::IntegerHasher::hash (94 samples, 0.04%)</title><rect x="94.5281%" y="757" width="0.0374%" height="15" fill="rgb(215,142,24)" fg:x="237412" fg:w="94"/><text x="94.7781%" y="767.50"></text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::Authenticator&gt;::publish (309 samples, 0.12%)</title><rect x="94.4461%" y="805" width="0.1230%" height="15" fill="rgb(250,187,7)" fg:x="237206" fg:w="309"/><text x="94.6961%" y="815.50"></text></g><g><title>sssim::authenticator::rsa::hash_package (299 samples, 0.12%)</title><rect x="94.4500%" y="789" width="0.1190%" height="15" fill="rgb(228,66,33)" fg:x="237216" fg:w="299"/><text x="94.7000%" y="799.50"></text></g><g><title>sssim::hash_to_prime::hash_to_prime (299 samples, 0.12%)</title><rect x="94.4500%" y="773" width="0.1190%" height="15" fill="rgb(234,215,21)" fg:x="237216" fg:w="299"/><text x="94.7000%" y="783.50"></text></g><g><title>&lt;sssim::primitives::prime::Prime as core::convert::TryFrom&lt;rug::integer::big::Integer&gt;&gt;::try_from (50 samples, 0.02%)</title><rect x="94.5691%" y="677" width="0.0199%" height="15" fill="rgb(222,191,20)" fg:x="237515" fg:w="50"/><text x="94.8191%" y="687.50"></text></g><g><title>rug::integer::big::Integer::is_probably_prime (50 samples, 0.02%)</title><rect x="94.5691%" y="661" width="0.0199%" height="15" fill="rgb(245,79,54)" fg:x="237515" fg:w="50"/><text x="94.8191%" y="671.50"></text></g><g><title>rug::ext::xmpz::probab_prime_p (50 samples, 0.02%)</title><rect x="94.5691%" y="645" width="0.0199%" height="15" fill="rgb(240,10,37)" fg:x="237515" fg:w="50"/><text x="94.8191%" y="655.50"></text></g><g><title>__gmpz_probab_prime_p (50 samples, 0.02%)</title><rect x="94.5691%" y="629" width="0.0199%" height="15" fill="rgb(214,192,32)" fg:x="237515" fg:w="50"/><text x="94.8191%" y="639.50"></text></g><g><title>__gmpz_millerrabin (27 samples, 0.01%)</title><rect x="94.5782%" y="613" width="0.0108%" height="15" fill="rgb(209,36,54)" fg:x="237538" fg:w="27"/><text x="94.8282%" y="623.50"></text></g><g><title>&lt;digest::core_api::xof_reader::XofReaderCoreWrapper&lt;T&gt; as digest::XofReader&gt;::read::{{closure}} (78 samples, 0.03%)</title><rect x="94.5890%" y="629" width="0.0311%" height="15" fill="rgb(220,10,11)" fg:x="237565" fg:w="78"/><text x="94.8390%" y="639.50"></text></g><g><title>&lt;sha3::Shake256ReaderCore as digest::core_api::XofReaderCore&gt;::read_block (78 samples, 0.03%)</title><rect x="94.5890%" y="613" width="0.0311%" height="15" fill="rgb(221,106,17)" fg:x="237565" fg:w="78"/><text x="94.8390%" y="623.50"></text></g><g><title>sha3::state::Sha3State::permute (78 samples, 0.03%)</title><rect x="94.5890%" y="597" width="0.0311%" height="15" fill="rgb(251,142,44)" fg:x="237565" fg:w="78"/><text x="94.8390%" y="607.50"></text></g><g><title>keccak::keccak_p (78 samples, 0.03%)</title><rect x="94.5890%" y="581" width="0.0311%" height="15" fill="rgb(238,13,15)" fg:x="237565" fg:w="78"/><text x="94.8390%" y="591.50"></text></g><g><title>&lt;digest::core_api::xof_reader::XofReaderCoreWrapper&lt;T&gt; as digest::XofReader&gt;::read (79 samples, 0.03%)</title><rect x="94.5890%" y="661" width="0.0315%" height="15" fill="rgb(208,107,27)" fg:x="237565" fg:w="79"/><text x="94.8390%" y="671.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::set_data (79 samples, 0.03%)</title><rect x="94.5890%" y="645" width="0.0315%" height="15" fill="rgb(205,136,37)" fg:x="237565" fg:w="79"/><text x="94.8390%" y="655.50"></text></g><g><title>sssim::hash_to_prime::IntegerHasher::hash (89 samples, 0.04%)</title><rect x="94.5890%" y="677" width="0.0354%" height="15" fill="rgb(250,205,27)" fg:x="237565" fg:w="89"/><text x="94.8390%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.06%)</title><rect x="94.5691%" y="773" width="0.0573%" height="15" fill="rgb(210,80,43)" fg:x="237515" fg:w="144"/><text x="94.8191%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (144 samples, 0.06%)</title><rect x="94.5691%" y="757" width="0.0573%" height="15" fill="rgb(247,160,36)" fg:x="237515" fg:w="144"/><text x="94.8191%" y="767.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (144 samples, 0.06%)</title><rect x="94.5691%" y="741" width="0.0573%" height="15" fill="rgb(234,13,49)" fg:x="237515" fg:w="144"/><text x="94.8191%" y="751.50"></text></g><g><title>core::ops::function::FnMut::call_mut (144 samples, 0.06%)</title><rect x="94.5691%" y="725" width="0.0573%" height="15" fill="rgb(234,122,0)" fg:x="237515" fg:w="144"/><text x="94.8191%" y="735.50"></text></g><g><title>sssim::authenticator::rsa::hash_package (144 samples, 0.06%)</title><rect x="94.5691%" y="709" width="0.0573%" height="15" fill="rgb(207,146,38)" fg:x="237515" fg:w="144"/><text x="94.8191%" y="719.50"></text></g><g><title>sssim::hash_to_prime::hash_to_prime (144 samples, 0.06%)</title><rect x="94.5691%" y="693" width="0.0573%" height="15" fill="rgb(207,177,25)" fg:x="237515" fg:w="144"/><text x="94.8191%" y="703.50"></text></g><g><title>__gmpn_redc_2_fat (5,892 samples, 2.35%)</title><rect x="94.7837%" y="693" width="2.3460%" height="15" fill="rgb(211,178,42)" fg:x="238054" fg:w="5892"/><text x="95.0337%" y="703.50">_..</text></g><g><title>__gmpn_addmul_2_fat (3,043 samples, 1.21%)</title><rect x="95.9181%" y="677" width="1.2116%" height="15" fill="rgb(230,69,54)" fg:x="240903" fg:w="3043"/><text x="96.1681%" y="687.50"></text></g><g><title>__gmpn_sqr (82 samples, 0.03%)</title><rect x="97.1297%" y="693" width="0.0326%" height="15" fill="rgb(214,135,41)" fg:x="243946" fg:w="82"/><text x="97.3797%" y="703.50"></text></g><g><title>__gmpn_powm (6,367 samples, 2.54%)</title><rect x="94.6284%" y="709" width="2.5351%" height="15" fill="rgb(237,67,25)" fg:x="237664" fg:w="6367"/><text x="94.8784%" y="719.50">__..</text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (6,698 samples, 2.67%)</title><rect x="94.6280%" y="741" width="2.6669%" height="15" fill="rgb(222,189,50)" fg:x="237663" fg:w="6698"/><text x="94.8780%" y="751.50">&lt;s..</text></g><g><title>__gmpz_powm (6,698 samples, 2.67%)</title><rect x="94.6280%" y="725" width="2.6669%" height="15" fill="rgb(245,148,34)" fg:x="237663" fg:w="6698"/><text x="94.8780%" y="735.50">__..</text></g><g><title>__gmpn_sub_n_x86_64 (330 samples, 0.13%)</title><rect x="97.1635%" y="709" width="0.1314%" height="15" fill="rgb(222,29,6)" fg:x="244031" fg:w="330"/><text x="97.4135%" y="719.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (6,700 samples, 2.67%)</title><rect x="94.6280%" y="773" width="2.6677%" height="15" fill="rgb(221,189,43)" fg:x="237663" fg:w="6700"/><text x="94.8780%" y="783.50">&lt;s..</text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (6,700 samples, 2.67%)</title><rect x="94.6280%" y="757" width="2.6677%" height="15" fill="rgb(207,36,27)" fg:x="237663" fg:w="6700"/><text x="94.8780%" y="767.50">&lt;s..</text></g><g><title>__gmpn_redc_2_fat (2,846 samples, 1.13%)</title><rect x="97.3956%" y="677" width="1.1332%" height="15" fill="rgb(217,90,24)" fg:x="244614" fg:w="2846"/><text x="97.6456%" y="687.50"></text></g><g><title>__gmpn_addmul_2_fat (1,497 samples, 0.60%)</title><rect x="97.9328%" y="661" width="0.5960%" height="15" fill="rgb(224,66,35)" fg:x="245963" fg:w="1497"/><text x="98.1828%" y="671.50"></text></g><g><title>__gmpn_sqr (31 samples, 0.01%)</title><rect x="98.5288%" y="677" width="0.0123%" height="15" fill="rgb(221,13,50)" fg:x="247460" fg:w="31"/><text x="98.7788%" y="687.50"></text></g><g><title>__gmpn_powm (3,100 samples, 1.23%)</title><rect x="97.3072%" y="693" width="1.2343%" height="15" fill="rgb(236,68,49)" fg:x="244392" fg:w="3100"/><text x="97.5572%" y="703.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (3,254 samples, 1.30%)</title><rect x="97.3064%" y="725" width="1.2956%" height="15" fill="rgb(229,146,28)" fg:x="244390" fg:w="3254"/><text x="97.5564%" y="735.50"></text></g><g><title>__gmpz_powm (3,254 samples, 1.30%)</title><rect x="97.3064%" y="709" width="1.2956%" height="15" fill="rgb(225,31,38)" fg:x="244390" fg:w="3254"/><text x="97.5564%" y="719.50"></text></g><g><title>__gmpn_sub_n_x86_64 (152 samples, 0.06%)</title><rect x="98.5415%" y="693" width="0.0605%" height="15" fill="rgb(250,208,3)" fg:x="247492" fg:w="152"/><text x="98.7915%" y="703.50"></text></g><g><title>__gmpn_redc_2_fat (2,817 samples, 1.12%)</title><rect x="98.7068%" y="661" width="1.1216%" height="15" fill="rgb(246,54,23)" fg:x="247907" fg:w="2817"/><text x="98.9568%" y="671.50"></text></g><g><title>__gmpn_addmul_2_fat (1,485 samples, 0.59%)</title><rect x="99.2371%" y="645" width="0.5913%" height="15" fill="rgb(243,76,11)" fg:x="249239" fg:w="1485"/><text x="99.4871%" y="655.50"></text></g><g><title>__gmpn_powm (3,111 samples, 1.24%)</title><rect x="98.6025%" y="677" width="1.2387%" height="15" fill="rgb(245,21,50)" fg:x="247645" fg:w="3111"/><text x="98.8525%" y="687.50"></text></g><g><title>__gmpn_sqr (32 samples, 0.01%)</title><rect x="99.8284%" y="661" width="0.0127%" height="15" fill="rgb(228,9,43)" fg:x="250724" fg:w="32"/><text x="100.0784%" y="671.50"></text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::Mul&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul (6,535 samples, 2.60%)</title><rect x="97.3064%" y="757" width="2.6020%" height="15" fill="rgb(208,100,47)" fg:x="244390" fg:w="6535"/><text x="97.5564%" y="767.50">&lt;s..</text></g><g><title>&lt;sssim::primitives::rsa_group::Rsa2048Group as core::ops::arith::MulAssign&lt;&amp;rug::integer::big::Integer&gt;&gt;::mul_assign (6,535 samples, 2.60%)</title><rect x="97.3064%" y="741" width="2.6020%" height="15" fill="rgb(232,26,8)" fg:x="244390" fg:w="6535"/><text x="97.5564%" y="751.50">&lt;s..</text></g><g><title>rug::integer::big::Integer::pow_mod_mut (3,281 samples, 1.31%)</title><rect x="98.6021%" y="725" width="1.3064%" height="15" fill="rgb(216,166,38)" fg:x="247644" fg:w="3281"/><text x="98.8521%" y="735.50"></text></g><g><title>rug::ext::xmpz::pow_mod (3,280 samples, 1.31%)</title><rect x="98.6025%" y="709" width="1.3060%" height="15" fill="rgb(251,202,51)" fg:x="247645" fg:w="3280"/><text x="98.8525%" y="719.50"></text></g><g><title>__gmpz_powm (3,280 samples, 1.31%)</title><rect x="98.6025%" y="693" width="1.3060%" height="15" fill="rgb(254,216,34)" fg:x="247645" fg:w="3280"/><text x="98.8525%" y="703.50"></text></g><g><title>__gmpn_sub_n_x86_64 (169 samples, 0.07%)</title><rect x="99.8411%" y="677" width="0.0673%" height="15" fill="rgb(251,32,27)" fg:x="250756" fg:w="169"/><text x="100.0911%" y="687.50"></text></g><g><title>sssim::accumulator::rsa::NonMembershipWitness&lt;G&gt;::update (6,541 samples, 2.60%)</title><rect x="97.3045%" y="773" width="2.6044%" height="15" fill="rgb(208,127,28)" fg:x="244385" fg:w="6541"/><text x="97.5545%" y="783.50">ss..</text></g><g><title>&lt;sssim::accumulator::rsa::Accumulator&lt;G&gt; as sssim::accumulator::BatchAccumulator&gt;::increment_batch (13,414 samples, 5.34%)</title><rect x="94.5691%" y="789" width="5.3409%" height="15" fill="rgb(224,137,22)" fg:x="237515" fg:w="13414"/><text x="94.8191%" y="799.50">&lt;sssim:..</text></g><g><title>&lt;sssim::primitives::prime::Prime as core::convert::TryFrom&lt;rug::integer::big::Integer&gt;&gt;::try_from (54 samples, 0.02%)</title><rect x="99.9108%" y="597" width="0.0215%" height="15" fill="rgb(254,70,32)" fg:x="250931" fg:w="54"/><text x="100.1608%" y="607.50"></text></g><g><title>rug::integer::big::Integer::is_probably_prime (54 samples, 0.02%)</title><rect x="99.9108%" y="581" width="0.0215%" height="15" fill="rgb(229,75,37)" fg:x="250931" fg:w="54"/><text x="100.1608%" y="591.50"></text></g><g><title>rug::ext::xmpz::probab_prime_p (54 samples, 0.02%)</title><rect x="99.9108%" y="565" width="0.0215%" height="15" fill="rgb(252,64,23)" fg:x="250931" fg:w="54"/><text x="100.1608%" y="575.50"></text></g><g><title>__gmpz_probab_prime_p (54 samples, 0.02%)</title><rect x="99.9108%" y="549" width="0.0215%" height="15" fill="rgb(232,162,48)" fg:x="250931" fg:w="54"/><text x="100.1608%" y="559.50"></text></g><g><title>&lt;u64 as keccak::LaneSize&gt;::rotate_left (40 samples, 0.02%)</title><rect x="99.9713%" y="485" width="0.0159%" height="15" fill="rgb(246,160,12)" fg:x="251083" fg:w="40"/><text x="100.2213%" y="495.50"></text></g><g><title>&lt;digest::core_api::xof_reader::XofReaderCoreWrapper&lt;T&gt; as digest::XofReader&gt;::read::{{closure}} (141 samples, 0.06%)</title><rect x="99.9327%" y="549" width="0.0561%" height="15" fill="rgb(247,166,0)" fg:x="250986" fg:w="141"/><text x="100.1827%" y="559.50"></text></g><g><title>&lt;sha3::Shake256ReaderCore as digest::core_api::XofReaderCore&gt;::read_block (141 samples, 0.06%)</title><rect x="99.9327%" y="533" width="0.0561%" height="15" fill="rgb(249,219,21)" fg:x="250986" fg:w="141"/><text x="100.1827%" y="543.50"></text></g><g><title>sha3::state::Sha3State::permute (140 samples, 0.06%)</title><rect x="99.9331%" y="517" width="0.0557%" height="15" fill="rgb(205,209,3)" fg:x="250987" fg:w="140"/><text x="100.1831%" y="527.50"></text></g><g><title>keccak::keccak_p (139 samples, 0.06%)</title><rect x="99.9335%" y="501" width="0.0553%" height="15" fill="rgb(243,44,1)" fg:x="250988" fg:w="139"/><text x="100.1835%" y="511.50"></text></g><g><title>&lt;digest::core_api::xof_reader::XofReaderCoreWrapper&lt;T&gt; as digest::XofReader&gt;::read (143 samples, 0.06%)</title><rect x="99.9323%" y="581" width="0.0569%" height="15" fill="rgb(206,159,16)" fg:x="250985" fg:w="143"/><text x="100.1823%" y="591.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::set_data (143 samples, 0.06%)</title><rect x="99.9323%" y="565" width="0.0569%" height="15" fill="rgb(244,77,30)" fg:x="250985" fg:w="143"/><text x="100.1823%" y="575.50"></text></g><g><title>sssim::hash_to_prime::IntegerHasher::hash (160 samples, 0.06%)</title><rect x="99.9323%" y="597" width="0.0637%" height="15" fill="rgb(218,69,12)" fg:x="250985" fg:w="160"/><text x="100.1823%" y="607.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::BatchAuthenticator&gt;::batch_prove (222 samples, 0.09%)</title><rect x="99.9100%" y="789" width="0.0884%" height="15" fill="rgb(212,87,7)" fg:x="250929" fg:w="222"/><text x="100.1600%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (220 samples, 0.09%)</title><rect x="99.9108%" y="773" width="0.0876%" height="15" fill="rgb(245,114,25)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (220 samples, 0.09%)</title><rect x="99.9108%" y="757" width="0.0876%" height="15" fill="rgb(210,61,42)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="767.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (220 samples, 0.09%)</title><rect x="99.9108%" y="741" width="0.0876%" height="15" fill="rgb(211,52,33)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="751.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (220 samples, 0.09%)</title><rect x="99.9108%" y="725" width="0.0876%" height="15" fill="rgb(234,58,33)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (220 samples, 0.09%)</title><rect x="99.9108%" y="709" width="0.0876%" height="15" fill="rgb(220,115,36)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (220 samples, 0.09%)</title><rect x="99.9108%" y="693" width="0.0876%" height="15" fill="rgb(243,153,54)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (220 samples, 0.09%)</title><rect x="99.9108%" y="677" width="0.0876%" height="15" fill="rgb(251,47,18)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (220 samples, 0.09%)</title><rect x="99.9108%" y="661" width="0.0876%" height="15" fill="rgb(242,102,42)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="671.50"></text></g><g><title>&lt;sssim::authenticator::rsa::Authenticator&lt;A&gt; as sssim::authenticator::BatchAuthenticator&gt;::batch_prove::{{closure}} (220 samples, 0.09%)</title><rect x="99.9108%" y="645" width="0.0876%" height="15" fill="rgb(234,31,38)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="655.50"></text></g><g><title>sssim::authenticator::rsa::hash_package (220 samples, 0.09%)</title><rect x="99.9108%" y="629" width="0.0876%" height="15" fill="rgb(221,117,51)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="639.50"></text></g><g><title>sssim::hash_to_prime::hash_to_prime (220 samples, 0.09%)</title><rect x="99.9108%" y="613" width="0.0876%" height="15" fill="rgb(212,20,18)" fg:x="250931" fg:w="220"/><text x="100.1608%" y="623.50"></text></g><g><title>__libc_start_main_alias_2 (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1157" width="5.7558%" height="15" fill="rgb(245,133,36)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1167.50">__libc_..</text></g><g><title>__libc_start_call_main (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1141" width="5.7558%" height="15" fill="rgb(212,6,19)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1151.50">__libc_..</text></g><g><title>main (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1125" width="5.7558%" height="15" fill="rgb(218,1,36)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1135.50">main</text></g><g><title>std::rt::lang_start_internal (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1109" width="5.7558%" height="15" fill="rgb(246,84,54)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1119.50">std::rt..</text></g><g><title>std::panic::catch_unwind (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1093" width="5.7558%" height="15" fill="rgb(242,110,6)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1103.50">std::pa..</text></g><g><title>std::panicking::try (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1077" width="5.7558%" height="15" fill="rgb(214,47,5)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1087.50">std::pa..</text></g><g><title>std::panicking::try::do_call (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1061" width="5.7558%" height="15" fill="rgb(218,159,25)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1071.50">std::pa..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1045" width="5.7558%" height="15" fill="rgb(215,211,28)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1055.50">std::rt..</text></g><g><title>std::panic::catch_unwind (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1029" width="5.7558%" height="15" fill="rgb(238,59,32)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1039.50">std::pa..</text></g><g><title>std::panicking::try (14,456 samples, 5.76%)</title><rect x="94.2430%" y="1013" width="5.7558%" height="15" fill="rgb(226,82,3)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1023.50">std::pa..</text></g><g><title>std::panicking::try::do_call (14,456 samples, 5.76%)</title><rect x="94.2430%" y="997" width="5.7558%" height="15" fill="rgb(240,164,32)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="1007.50">std::pa..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (14,456 samples, 5.76%)</title><rect x="94.2430%" y="981" width="5.7558%" height="15" fill="rgb(232,46,7)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="991.50">core::o..</text></g><g><title>std::rt::lang_start::{{closure}} (14,456 samples, 5.76%)</title><rect x="94.2430%" y="965" width="5.7558%" height="15" fill="rgb(229,129,53)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="975.50">std::rt..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14,456 samples, 5.76%)</title><rect x="94.2430%" y="949" width="5.7558%" height="15" fill="rgb(234,188,29)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="959.50">std::sy..</text></g><g><title>core::ops::function::FnOnce::call_once (14,456 samples, 5.76%)</title><rect x="94.2430%" y="933" width="5.7558%" height="15" fill="rgb(246,141,4)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="943.50">core::o..</text></g><g><title>sssim::main (14,456 samples, 5.76%)</title><rect x="94.2430%" y="917" width="5.7558%" height="15" fill="rgb(229,23,39)" fg:x="236696" fg:w="14456"/><text x="94.4930%" y="927.50">sssim::..</text></g><g><title>sssim::run_batch (14,449 samples, 5.75%)</title><rect x="94.2458%" y="901" width="5.7530%" height="15" fill="rgb(206,12,3)" fg:x="236703" fg:w="14449"/><text x="94.4958%" y="911.50">sssim::..</text></g><g><title>time::duration::Duration::time_fn (14,449 samples, 5.75%)</title><rect x="94.2458%" y="885" width="5.7530%" height="15" fill="rgb(252,226,20)" fg:x="236703" fg:w="14449"/><text x="94.4958%" y="895.50">time::d..</text></g><g><title>sssim::run_batch::{{closure}} (14,449 samples, 5.75%)</title><rect x="94.2458%" y="869" width="5.7530%" height="15" fill="rgb(216,123,35)" fg:x="236703" fg:w="14449"/><text x="94.4958%" y="879.50">sssim::..</text></g><g><title>sssim::batch_update_trials (14,449 samples, 5.75%)</title><rect x="94.2458%" y="853" width="5.7530%" height="15" fill="rgb(212,68,40)" fg:x="236703" fg:w="14449"/><text x="94.4958%" y="863.50">sssim::..</text></g><g><title>time::duration::Duration::time_fn (13,946 samples, 5.55%)</title><rect x="94.4461%" y="837" width="5.5527%" height="15" fill="rgb(254,125,32)" fg:x="237206" fg:w="13946"/><text x="94.6961%" y="847.50">time::d..</text></g><g><title>sssim::batch_update_trials::{{closure}} (13,946 samples, 5.55%)</title><rect x="94.4461%" y="821" width="5.5527%" height="15" fill="rgb(253,97,22)" fg:x="237206" fg:w="13946"/><text x="94.6961%" y="831.50">sssim::..</text></g><g><title>&lt;sssim::authenticator::rsa::PoolAuthenticator&lt;A&gt; as sssim::authenticator::PoolAuthenticator&gt;::batch_process (13,637 samples, 5.43%)</title><rect x="94.5691%" y="805" width="5.4297%" height="15" fill="rgb(241,101,14)" fg:x="237515" fg:w="13637"/><text x="94.8191%" y="815.50">&lt;sssim:..</text></g><g><title>all (251,155 samples, 100%)</title><rect x="0.0000%" y="1205" width="100.0000%" height="15" fill="rgb(238,103,29)" fg:x="0" fg:w="251155"/><text x="0.2500%" y="1215.50"></text></g><g><title>sssim (251,155 samples, 100.00%)</title><rect x="0.0000%" y="1189" width="100.0000%" height="15" fill="rgb(233,195,47)" fg:x="0" fg:w="251155"/><text x="0.2500%" y="1199.50">sssim</text></g><g><title>_start (14,462 samples, 5.76%)</title><rect x="94.2418%" y="1173" width="5.7582%" height="15" fill="rgb(246,218,30)" fg:x="236693" fg:w="14462"/><text x="94.4918%" y="1183.50">_start</text></g></svg></svg>